import{_ as o,r as l,o as c,c as i,d as n,e as s,a as t,g as r,f as u,b as e}from"./app-e9249a1b.js";const d={},k=e(`<h1 id="vue2-技巧" tabindex="-1"><a class="header-anchor" href="#vue2-技巧" aria-hidden="true">#</a> Vue2 技巧</h1><p>该文档语法是基于2.6.12</p><h2 id="技巧篇" tabindex="-1"><a class="header-anchor" href="#技巧篇" aria-hidden="true">#</a> 技巧篇</h2><h3 id="props" tabindex="-1"><a class="header-anchor" href="#props" aria-hidden="true">#</a> props</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token comment">// 基础的类型检查 (\`null\` 匹配任何类型)</span>
  <span class="token literal-property property">propA</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
  <span class="token comment">// 多个可能的类型</span>
  <span class="token literal-property property">propB</span><span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Number<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 必填的字符串</span>
  <span class="token literal-property property">propC</span><span class="token operator">:</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
   <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 带有默认值的数字</span>
  <span class="token literal-property property">propD</span><span class="token operator">:</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
   <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">100</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 带有默认值的对象</span>
  <span class="token literal-property property">propE</span><span class="token operator">:</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">type</span><span class="token operator">:</span> Object<span class="token punctuation">,</span>
   <span class="token comment">// 对象或数组且一定会从一个工厂函数返回默认值</span>
   <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span> <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 自定义验证函数</span>
  <span class="token literal-property property">propF</span><span class="token operator">:</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
   <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这个值必须匹配下列字符串中的一个</span>
    <span class="token keyword">return</span> t <span class="token operator">===</span> <span class="token string">&#39;fade&#39;</span> <span class="token operator">||</span> t <span class="token operator">===</span> <span class="token string">&#39;slide&#39;</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token keyword">default</span><span class="token operator">:</span><span class="token string">&#39;slide&#39;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于slide校验，会在运行的时候console报错：</p><blockquote><p>[Vue warn]: Invalid prop: custom validator check failed for prop &quot;pb&quot;. found in xxx。。封装组建的时候，约束调用的时候传参规范</p></blockquote><h3 id="props、-attrs、-listeners" tabindex="-1"><a class="header-anchor" href="#props、-attrs、-listeners" aria-hidden="true">#</a> $props、$attrs、$listeners</h3>`,8),v={href:"https://juejin.cn/post/6844904191224184840#heading-10",target:"_blank",rel:"noopener noreferrer"},m=e(`<h3 id="provide与inject" tabindex="-1"><a class="header-anchor" href="#provide与inject" aria-hidden="true">#</a> provide与inject</h3><p>不止父子传值，祖宗传值也可以</p><h3 id="sync" tabindex="-1"><a class="header-anchor" href="#sync" aria-hidden="true">#</a> .sync</h3><p><strong>当一个子组件改变了一个 prop 的值时，这个变化也会同步到父组件中所绑定。这样就不用再在组件调用处写一个@event回调函数去更新绑定的value值了</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>组件<span class="token operator">--</span><span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">&quot;visible&quot;</span> @click<span class="token operator">=</span><span class="token string">&quot;click&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">visible</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 通过update:visible同步外部传入的visible属性的值</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&quot;update:visible&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>调用方式<span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>custom<span class="token operator">-</span>overlay <span class="token operator">:</span>visible<span class="token punctuation">.</span>sync<span class="token operator">=</span><span class="token string">&quot;visible&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">visible</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="v-model-语法糖" tabindex="-1"><a class="header-anchor" href="#v-model-语法糖" aria-hidden="true">#</a> v-model 语法糖</h3><p>Vue内置了v-model指令，v-model 是一个语法糖，可以拆解为 props: value 和 events: input。就是说组件只要提供一个名为 value 的 prop，以及名为 input 的自定义事件，满足这两个条件，使用者就能在自定义组件上使用 v-model</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;changeValue(-1)&quot;</span><span class="token operator">&gt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>currentVal<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;changeValue(1)&quot;</span><span class="token operator">&gt;</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> Number <span class="token comment">// 定义value属性</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">currentVal</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">changeVal</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>currentVal <span class="token operator">+=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentVal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义input事件</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>counter v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;counerVal&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>定制v-model语法糖内默认的value和input</p></blockquote>`,9),b={href:"http://www.meiwen.com.cn/subject/crakoctx.html",target:"_blank",rel:"noopener noreferrer"},g=e(`<p>原理：比如封装组建的时候，使用的prop可能会是value，这就跟v-model默认的value属性冲突了。event也一样。</p><p>所以需要定制一下，也就是把默认的value和event改个名字</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token string">&#39;newValue&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">event</span><span class="token operator">:</span> <span class="token string">&#39;newEvent&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    
然后，在封装的组件内prop属性就变为了newValue，event（默认input）就变为了newEvent

<span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;change&quot;</span><span class="token operator">&gt;</span>click <span class="token operator">+</span><span class="token number">100</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token string">&quot;newValue&quot;</span><span class="token punctuation">,</span> <span class="token comment">//这个字段，是指父组件设置 v-model 时，将变量值传给子组件的 newValue</span>
    <span class="token literal-property property">event</span><span class="token operator">:</span> <span class="token string">&quot;newEvent&quot;</span> <span class="token comment">//这个字段，是指父组件监听 parent-event 事件</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">newValue</span><span class="token operator">:</span> Number <span class="token comment">// 此处必须定义和 model 的 prop 相同的 props，因为 v-model 会传值给子组件</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span> newValue   <span class="token comment">// value 变成 msg</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">100</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;newEvent&#39;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="样式穿透" tabindex="-1"><a class="header-anchor" href="#样式穿透" aria-hidden="true">#</a> 样式穿透</h3><p><span style="font-size:12px;">常用/deep/、&gt;&gt;&gt;、::v-deep</span></p>`,5),h={href:"https://blog.csdn.net/King__k/article/details/123531089",target:"_blank",rel:"noopener noreferrer"},y=e(`<ul><li>&quot;&gt;&gt;&gt;&quot;</li></ul><p>如果vue中style使用的是css，那么则可以使用&gt;&gt;&gt;</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">&quot;css&quot;</span> scoped<span class="token operator">&gt;</span>
	<span class="token punctuation">.</span>a <span class="token operator">&gt;&gt;&gt;</span> <span class="token punctuation">.</span>b <span class="token punctuation">{</span> 
	 <span class="token comment">/* ... */</span>
	<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>/deep/</li></ul><p>如果vue中使用的是style使用css(less, sass, scss)的预处理器，则需要使用deep，因为scss预处理器是无法解析&gt;&gt;&gt;的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">&quot;scss&quot;</span> scoped<span class="token operator">&gt;</span>
	<span class="token punctuation">.</span>a<span class="token punctuation">{</span>
		<span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">deep</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">.</span>b <span class="token punctuation">{</span> 
		 <span class="token comment">/* ... */</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> 
<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>::v-deep</li></ul><p>如果你是使用vue-cli3以上版本的脚手架创建的项目，使用/deep/可能会出现报错信息。如果出现报错或失效等问题，则可以使用::v-deep。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">&quot;scss&quot;</span> scoped<span class="token operator">&gt;</span>
	<span class="token operator">:</span><span class="token operator">:</span>v<span class="token operator">-</span>deep <span class="token punctuation">.</span>a<span class="token punctuation">{</span>
	 <span class="token comment">/* ... */</span>
	<span class="token punctuation">}</span> 
<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="slot" tabindex="-1"><a class="header-anchor" href="#slot" aria-hidden="true">#</a> slot</h3><p>slot可以理解为子组件提供的一个占位接口</p><ul><li>1、未使用slot的时候</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>child<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>子组件的ui<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>parent<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>child<span class="token operator">&gt;</span>该内容是不会显示的<span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>2、想要父组件在子组件上显示自定义的内容</li></ul><p>可以入参prop，可以使用slot</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>child<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>子组件的ui<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>slot<span class="token operator">&gt;</span>默认内容<span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>parent<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>child<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">&gt;</span> <span class="token comment">// mark:1</span>
	<span class="token operator">&lt;</span>child<span class="token operator">&gt;</span>parent的custom内容<span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">&gt;</span> <span class="token comment">// mark:2</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p style="color:red;font-size:14px;">mark:1 如果没有自定义内容，子组件会显示默认内容</p><p style="color:red;font-size:14px;">mark:2 父组件使用的时候如果有自定义内容，就会自动的显示到子组建的slot占位位置</p><ul><li>3、针对子组件有多个slot</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>child<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>子组件的ui<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>slot<span class="token operator">&gt;</span>默认内容a<span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>slot<span class="token operator">&gt;</span>默认内容b<span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>slot<span class="token operator">&gt;</span>默认内容c<span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>parent<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>child<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">&gt;</span> <span class="token comment">// mark:3 </span>
	<span class="token operator">&lt;</span>child<span class="token operator">&gt;</span>parent的custom内容<span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">&gt;</span> <span class="token comment">// mark:4 </span>
<span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p style="color:red;font-size:14px;">mark:3 如果没有自定义内容，子组件多个slot会默认显示</p><p style="color:red;font-size:14px;">mark:4 如果这样使用，子组件会显示3个该自定义内容</p><ul><li>4、针对子组件有多个slot，指定slot插入 (具名插槽)</li></ul><p>需要给slot起名字，不然所有的slot都会显示自定义内容</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>child<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>子组件的ui<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">&quot;a&quot;</span><span class="token operator">&gt;</span>默认内容a<span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">&quot;a&quot;</span><span class="token operator">&gt;</span>默认内容a<span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">&quot;b&quot;</span><span class="token operator">&gt;</span>默认内容b<span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">&quot;c&quot;</span><span class="token operator">&gt;</span>默认内容c<span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>parent<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>child #a<span class="token operator">&gt;</span>parent的custom内容<span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">&gt;</span> <span class="token comment">// mark:5 </span>
	<span class="token operator">&lt;</span>child<span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span>template #a<span class="token operator">&gt;</span>parent的custom内容<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token operator">:</span>a<span class="token operator">&gt;</span>parent的custom内容<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">&gt;</span> <span class="token comment">// mark:6 </span>
<span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p style="color:red;font-size:14px;">mark:5 指定插槽插入自定义内容，如上slot有同名的，也会重复插入到a-slot。其他没有指名插入的，就展示默认内容</p><p style="color:red;font-size:14px;">mark:6 v-slot写法只能添加到template上, vue3.0后废弃</p><h4 id="作用域slot" tabindex="-1"><a class="header-anchor" href="#作用域slot" aria-hidden="true">#</a> 作用域slot</h4><p>作用：在父组件直接访问子组件的数据</p><p>vue渲染原则：代码在哪就在哪渲染，作用域就在哪。所以，封装的子组件内的数据，父组件无法直接访问的</p>`,30),f={href:"https://blog.csdn.net/weixin_60811442/article/details/123538200",target:"_blank",rel:"noopener noreferrer"},w=e(`<p>官方文档不是很清晰</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span>、子组件属性暴露出来
<span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>slot <span class="token operator">:</span>userdata<span class="token operator">=</span><span class="token string">&quot;user&quot;</span><span class="token operator">&gt;</span>
    <span class="token punctuation">{</span><span class="token punctuation">{</span> user<span class="token punctuation">.</span>lastName <span class="token punctuation">}</span><span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>

<span class="token number">2</span>、父组件
<span class="token operator">&lt;</span>current<span class="token operator">-</span>user<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>template slot<span class="token operator">-</span>scop<span class="token operator">=</span><span class="token string">&quot;slotProps&quot;</span><span class="token operator">&gt;</span>
    <span class="token punctuation">{</span><span class="token punctuation">{</span> slotProps<span class="token punctuation">.</span>userdata<span class="token punctuation">.</span>firstName <span class="token punctuation">}</span><span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>current<span class="token operator">-</span>user<span class="token operator">&gt;</span>

‘slotProps’ 一般都这么写，这只是个名字而已，你随便

<span class="token operator">&lt;</span>current<span class="token operator">-</span>user<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>template #<span class="token keyword">default</span><span class="token operator">=</span><span class="token string">&quot;{userdata}&quot;</span><span class="token operator">&gt;</span>
    <span class="token punctuation">{</span><span class="token punctuation">{</span> userdata<span class="token punctuation">.</span>firstName <span class="token punctuation">}</span><span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>current<span class="token operator">-</span>user<span class="token operator">&gt;</span>

也可以使用解构来简化，注意解构的话，注意名字必须是子组件暴露的attribute名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="有条件的渲染slot" tabindex="-1"><a class="header-anchor" href="#有条件的渲染slot" aria-hidden="true">#</a> 有条件的渲染slot</h4>`,3),x={style:{}},j=e(`<p>组件默认都有$slots获取使用的无作用域的slot，$scopedSlots获取使用的所有类型的slot。官方文档建议统一使用scopedSlots</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$scopedSlots.default || $scopedSlots.second<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>styles<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token punctuation">/&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>second<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="观察子组件中slot的变化" tabindex="-1"><a class="header-anchor" href="#观察子组件中slot的变化" aria-hidden="true">#</a> 观察子组件中slot的变化</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mounted() {
    const observer = new MutationObserver(this.update)
    observer.observe(this.$el, {
      childList: true,
      subtree: true
    })
  },
  methods: {
    update() {
      console.log(&#39;=========&#39;)
    },
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>监听slot dom的变化</p><p><span style="color:blue;">如何实现父组件slot内容变化的监听呢？上面只是实现了dom变化的监听 </span></p><h3 id="动态组件-component" tabindex="-1"><a class="header-anchor" href="#动态组件-component" aria-hidden="true">#</a> 动态组件 component</h3><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>info<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>roleComponent<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>roleComponent<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> AdminInfo <span class="token keyword">from</span> <span class="token string">&#39;./admin-info&#39;</span>
<span class="token keyword">import</span> BookkeeperInfo <span class="token keyword">from</span> <span class="token string">&#39;./bookkeeper-info&#39;</span>
<span class="token keyword">import</span> HrInfo <span class="token keyword">from</span> <span class="token string">&#39;./hr-info&#39;</span>
<span class="token keyword">import</span> UserInfo <span class="token keyword">from</span> <span class="token string">&#39;./user-info&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    AdminInfo<span class="token punctuation">,</span>
    BookkeeperInfo<span class="token punctuation">,</span>
    HrInfo<span class="token punctuation">,</span>
    UserInfo
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">roleComponents</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">admin</span><span class="token operator">:</span> AdminInfo<span class="token punctuation">,</span>
        <span class="token literal-property property">bookkeeper</span><span class="token operator">:</span> BookkeeperInfo<span class="token punctuation">,</span>
        <span class="token literal-property property">hr</span><span class="token operator">:</span> HrInfo<span class="token punctuation">,</span>
        <span class="token literal-property property">user</span><span class="token operator">:</span> UserInfo
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">roleComponent</span><span class="token operator">:</span> <span class="token keyword">undefined</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> role<span class="token punctuation">,</span> roleComponents <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>roleComponent <span class="token operator">=</span> roleComponents<span class="token punctuation">[</span>role<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="watch" tabindex="-1"><a class="header-anchor" href="#watch" aria-hidden="true">#</a> watch</h3><ul><li>观察单一值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>
	<span class="token function">value1</span><span class="token punctuation">(</span><span class="token parameter">newV<span class="token punctuation">,</span> oldV</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">value2</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    	<span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newV<span class="token punctuation">,</span> oldV</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">value3</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    	<span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newV<span class="token punctuation">,</span> oldV</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>观察对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>
	<span class="token string-property property">&#39;person&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newV<span class="token punctuation">,</span> oldV</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// mark:1</span>
      <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// mark:2</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string">&#39;person.name&#39;</span><span class="token punctuation">(</span>newV<span class="token punctuation">,</span> oldV<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// mark:3</span>
    	<span class="token operator">...</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;person.age&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    	<span class="token function-variable function">handle</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newV<span class="token punctuation">,</span> oldV</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    	
    	or
    	
    	<span class="token function">handle</span><span class="token punctuation">(</span><span class="token parameter">newV<span class="token punctuation">,</span> oldV</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p style="color:red;font-size:14px;">mark:1 默认false，作用：针对对象或数组复杂类型数据，属性变、元素变，对象地址是不变的，想要实现监听，deep监听到每一层的属性，只要有变动，就会触发</p><p style="color:red;font-size:14px;">mark:2 默认false，作用：当所在组件创建的时候会立即执行一次。可以理解为原本属性地址是空的，分配地址后触发一下</p>`,15),q=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string-property property">&#39;person&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newV<span class="token punctuation">,</span> oldV</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;=============  person watch  &#39;</span> <span class="token operator">+</span> newV <span class="token operator">+</span> <span class="token string">&#39;    &#39;</span> <span class="token operator">+</span> oldV<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>

<span class="token comment">// 结果：</span>
person watch  <span class="token punctuation">[</span>object Object<span class="token punctuation">]</span>    <span class="token keyword">undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p style="color:red;font-size:14px;">mark:3 监听对象的某一属性可以这么实现</p><h3 id="watch-1" tabindex="-1"><a class="header-anchor" href="#watch-1" aria-hidden="true">#</a> $watch</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
      <span class="token literal-property property">e</span><span class="token operator">:</span> <span class="token number">4</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相对于watch</p><ul><li>$watch监听形式更多。如监听 this.a + this.b</li><li>$watch更灵活，可以取消监听<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> unDataArr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataArr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newval<span class="token punctuation">,</span>old</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
       <span class="token function">unDataArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>$watch</p></blockquote><ul><li><p>单个的顶层属性，第一个参数是字符串，第二个参数是函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 顶层属性</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 做点什么</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>包含嵌套的对象里面的属性，两个参数都必须是函数形式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue2</span>
<span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 键路径</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">&#39;c.d&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 做点什么</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// vue3</span>
<span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 用于监视单个嵌套属性</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>c<span class="token punctuation">.</span>d<span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 做点什么</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对于更复杂的表达式，用一个函数取代</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 用于监视复杂表达式的函数</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span>
    <span class="token comment">// 表达式 \`this.a + this.b\` 每次得出一个不同的结果时</span>
    <span class="token comment">// 处理函数都会被调用。</span>
    <span class="token comment">// 这就像监听一个未被定义的计算属性</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 做点什么</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="v-if-v-show" tabindex="-1"><a class="header-anchor" href="#v-if-v-show" aria-hidden="true">#</a> v-if / v-show</h3><p>v-if是元素的销毁重建</p><p>v-show是状态隐藏</p><p>针对状态偶尔变动一次的，想咋弄都可以，但是针对频繁隐藏显示的元素，建议使用v-show。。大前端们，同级别下，ui的创建及渲染才是开销最大的</p><p>略</p><h3 id="v-for-解构" tabindex="-1"><a class="header-anchor" href="#v-for-解构" aria-hidden="true">#</a> v-for 解构</h3><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span>
  <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ name, id } in users<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>
  {{ name }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(value, index) in [
  &#39;Hai Yong&#39;,
  &#39;Frozen&#39;,
  &#39;Web Beginner&#39;
]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  {{ index + 1 }} - {{ value }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(value, key, index) in {
  name: &#39;Hai Yong&#39;,
  released: 2021,
  director: &#39;A blogger&#39;,
}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  #{{ index + 1 }}. {{ key }}: {{ value }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据更新ui不响应问题" tabindex="-1"><a class="header-anchor" href="#数据更新ui不响应问题" aria-hidden="true">#</a> 数据更新ui不响应问题</h3><blockquote><p>给data obj中不存在的属性赋值不响应</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">userInfo</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token operator">...</span>

<span class="token keyword">this</span><span class="token punctuation">.</span>userInfo<span class="token punctuation">.</span>officialAccount <span class="token operator">=</span> <span class="token string">&#39;前端有的玩&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果是不响应的：</p><div style="color:red;">这是因为在Vue内部，数据响应是通过使用Object.definePrototype监听对象的每一个键的getter,setter方法来实现的，但通过这种方法只能监听到已有属性，新增的属性是无法监听到的</div><p>有几种解决方案：</p><p>1、直接在data obj中定义好，然后赋值更新</p><p>2、直接替换obj，</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>userInfo <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 将原来的userInfo 通过扩展运算法复制到新的对象里面</span>
  <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>userInfo<span class="token punctuation">,</span>
  <span class="token comment">// 添加新属性</span>
  <span class="token literal-property property">officialAccount</span><span class="token operator">:</span> <span class="token string">&#39;前端有的玩&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、Vue.set</p><p>Vue.set会引用Vue，增加体积</p><div style="color:red;">Vue又将set方法挂载到了Vue的原型链上了，即Vue.prototype.$set = Vue.set,所以在Vue组件内部可以直接使用this.$set代替Vue.set</div><p>4、forceUpdate</p><p>调用一下forceUpdate就会让Vue组件重新渲染，但是实际上这个方法并不建议使用，因为它会引起许多不必要的性能消耗</p><blockquote><p>更新数组元素的值 this.list[index] = newValue</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&#39;王五&#39;</span><span class="token punctuation">)</span>

$forceUpdate

<span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;王五&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hookevent" tabindex="-1"><a class="header-anchor" href="#hookevent" aria-hidden="true">#</a> hookEvent</h3><h4 id="组件内部监听自己生命周期" tabindex="-1"><a class="header-anchor" href="#组件内部监听自己生命周期" aria-hidden="true">#</a> 组件内部监听自己生命周期</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 监听窗口发生变化，resize组件</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$_handleResizeChart<span class="token punctuation">)</span>
    <span class="token comment">// 通过hook监听组件销毁钩子函数，并取消监听事件</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$once</span><span class="token punctuation">(</span><span class="token string">&#39;hook:beforeDestroy&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$_handleResizeChart<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="外部监听组件生命周期" tabindex="-1"><a class="header-anchor" href="#外部监听组件生命周期" aria-hidden="true">#</a> 外部监听组件生命周期</h4><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!--通过@hook:updated监听组件的updated生命钩子函数--&gt;</span>
  <span class="token comment">&lt;!--组件的所有生命周期钩子都可以通过@hook:钩子函数名 来监听触发--&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>custom-select</span> <span class="token attr-name"><span class="token namespace">@hook:</span>updated</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$_handleSelectUpdated<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="简易状态管理" tabindex="-1"><a class="header-anchor" href="#简易状态管理" aria-hidden="true">#</a> 简易状态管理</h3><p>小项目还用Vuex?用Vue.observable手写一个状态管理</p><p>在前端项目中，有许多数据需要在各个组件之间进行传递共享，这时候就需要有一个状态管理工具，一般情况下，我们都会使用Vuex，但对于小型项目来说，就像Vuex官网所说：“如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。确实是如此——如果您的应用够简单，您最好不要使用 Vuex”。这时候我们就可以使用<span style="color:red;">Vue2.6提供的新API Vue.observable</span>手动打造一个Vuex</p><p>1、创建store</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token comment">// 通过Vue.observable创建一个可响应的对象</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> store <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">observable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">userInfo</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">roleIds</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 定义 mutations, 修改属性</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">setUserInfo</span><span class="token punctuation">(</span><span class="token parameter">userInfo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    store<span class="token punctuation">.</span>userInfo <span class="token operator">=</span> userInfo
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setRoleIds</span><span class="token punctuation">(</span><span class="token parameter">roleIds</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    store<span class="token punctuation">.</span>roleIds <span class="token operator">=</span> roleIds
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、使用</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    {{ userInfo.name }}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> store<span class="token punctuation">,</span> mutations <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../store&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">userInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> store<span class="token punctuation">.</span>userInfo
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mutations<span class="token punctuation">.</span><span class="token function">setUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;子君&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mixin-混入-mix-in" tabindex="-1"><a class="header-anchor" href="#mixin-混入-mix-in" aria-hidden="true">#</a> mixin 混入 （mix in）</h3><p>是个.js文件，内部也是vue的结构，data，method，watch，components,filter,directives,props，生命周期等</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> xxxMixins <span class="token keyword">from</span> <span class="token string">&#39;./xxx-mixins&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token comment">// mixins属性用于导入混入，是一个数组，数组可以传入多个混入对象</span>
  <span class="token literal-property property">mixins</span><span class="token operator">:</span> <span class="token punctuation">[</span>xxxMixins<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>不同位置的混入规则</p></blockquote><ul><li>data 对于data,在混入时会进行递归合并，如果两个属性发生冲突，则以组件自身为主</li><li>生命周期钩子函数，混入时会将同名钩子函数加入到一个数组中，然后在调用时依次执行。优先mixin对象的钩子函数。如果一个组件混入了多个对象，对于混入对象里面的同名钩子函数，将按照数组顺序依次执行</li><li>其他选项 对于值为对象的选项，如methods,components,filter,directives,props等等，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对</li></ul><blockquote><p>全局混入</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 将埋点方法通过全局混入添加到每个组件内部
     * 
     * 建议将埋点方法绑定到Vue的原型链上面，如： Vue.prototype.$track = () =&gt; <span class="token punctuation">{</span><span class="token punctuation">}</span>
     * */</span>
    <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> css</h3><blockquote><p>~，&gt;，空格，逗号，+</p></blockquote>`,52),V={href:"https://blog.csdn.net/dxnn520/article/details/124168144",target:"_blank",rel:"noopener noreferrer"},_=n("h1",{id:"调试篇",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#调试篇","aria-hidden":"true"},"#"),s(" 调试篇")],-1),$=n("p",null,"基于 chrome 浏览器",-1),I={href:"https://juejin.cn/post/7085135692568723492",target:"_blank",rel:"noopener noreferrer"},z={href:"https://juejin.cn/post/6844903431467958285",target:"_blank",rel:"noopener noreferrer"},C={href:"https://juejin.cn/post/7145256569041584142",target:"_blank",rel:"noopener noreferrer"},A=e(`<h3 id="重新发送一个网络请求" tabindex="-1"><a class="header-anchor" href="#重新发送一个网络请求" aria-hidden="true">#</a> 重新发送一个网络请求</h3><p>选中Network &gt; 点击Fetch/XHR &gt; 选择要重新发送的请求 &gt; 右键选择Replay XHR</p><p>如果有要修改参数的：</p><p>选中Network &gt; 点击Fetch/XHR &gt; 选择Copy as fetch &gt; 控制台粘贴代码 &gt; 修改参数，回车搞定</p><h2 id="性能篇" tabindex="-1"><a class="header-anchor" href="#性能篇" aria-hidden="true">#</a> 性能篇</h2><h3 id="object-freeze-提高vue渲染性能" tabindex="-1"><a class="header-anchor" href="#object-freeze-提高vue渲染性能" aria-hidden="true">#</a> Object.freeze（提高vue渲染性能）</h3><p>当一个 Vue 实例被创建时，它将 data 对象中的所有的 property 加入到 Vue 的响应式系统中。当这些 property 的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。但是这个过程实际上是比较消耗性能的，所以对于一些有大量数据但只是展示的界面来说，并不需要将property加入到响应式系统中，这样可以提高渲染性能</p><blockquote><p>这里唯一的例外是使用 Object.freeze()，这会阻止修改现有的 property，也意味着响应系统无法再追踪变化</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>el<span class="token operator">-</span>table <span class="token operator">:</span>data<span class="token operator">=</span><span class="token string">&quot;tableData&quot;</span> style<span class="token operator">=</span><span class="token string">&quot;width: 100%&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column prop<span class="token operator">=</span><span class="token string">&quot;name&quot;</span> label<span class="token operator">=</span><span class="token string">&quot;姓名&quot;</span> width<span class="token operator">=</span><span class="token string">&quot;180&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">子君</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token comment">// 在这里我们用了Object.freeze</span>
      <span class="token literal-property property">tableData</span><span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果列表数据是动态的，就不能把列表freeze，可以降一级来优化性能，把item冻结上</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;子君\${index}&#39;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),N=e(`<h2 id="原理篇" tabindex="-1"><a class="header-anchor" href="#原理篇" aria-hidden="true">#</a> 原理篇</h2><h3 id="vue-extend" tabindex="-1"><a class="header-anchor" href="#vue-extend" aria-hidden="true">#</a> Vue.extend</h3><p>自定义全局组件，使用js调用</p><p>Vue.extend 属于 Vue 的全局 API，在实际业务开发中我们很少使用，因为相比常用的 Vue.component 写法使用 extend 步骤要更加繁琐一些</p><blockquote><p>应用场景 在 vue 项目中，初始化的根实例后，所有页面基本上都是通过 router 来管理，组件也是通过 import 来进行局部注册，所以组件的创建不需要去关注，相比 extend 要更省心一点点。但是这样做会有几个缺点：</p></blockquote><p>组件模板都是事先定义好的，如果我要从接口动态渲染组件怎么办？ 所有内容都是在 #app 下渲染，注册组件都是在当前位置渲染。如果我要实现一个类似于 window.alert() 提示组件要求像调用 JS 函数一样调用它，该怎么办？ 这时候，Vue.extend + vm.$mount 组合就派上用场了</p><blockquote><p>使用方式</p></blockquote><ul><li>通过 new Profile().$mount(’#mount-point’) 来挂载到指定的元素上</li><li>创建实例的时候传入一个元素，生成的组件将会挂载到这个元素上</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> TemConstructor <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>tem<span class="token punctuation">)</span> 
<span class="token keyword">const</span> intance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemConstructor</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> noti<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TemConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>noti<span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注册为全局组件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">...</span>
Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;Component&#39;</span><span class="token punctuation">,</span> component<span class="token punctuation">)</span>

<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>component<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>component<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="demo-封装一个组件" tabindex="-1"><a class="header-anchor" href="#demo-封装一个组件" aria-hidden="true">#</a> demo 封装一个组件</h3><p>1、新建一个messageBox.vue</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>confirm<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>flag<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span> // 注意，如果是vant的，v-model
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>primary<span class="token punctuation">&#39;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>ok<span class="token punctuation">&#39;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>left<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{text.btn.ok}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>info<span class="token punctuation">&#39;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>no<span class="token punctuation">&#39;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>right<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{text.btn.no}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">flag</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">text</span><span class="token operator">:</span><span class="token punctuation">{</span>
          <span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">&#39;标题&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token string">&#39;这是一个弹出框组件&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">btn</span><span class="token operator">:</span><span class="token punctuation">{</span>
              <span class="token literal-property property">ok</span><span class="token operator">:</span><span class="token string">&#39;确定&#39;</span><span class="token punctuation">,</span>
              <span class="token literal-property property">no</span><span class="token operator">:</span><span class="token string">&#39;取消&#39;</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token comment">// ############################################</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">no</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p style="color:red;font-size:14px;">mark: 注意：注意：注意：</p><p style="color:red;font-size:14px;">如上，关闭一个组件的时候，一定要清理掉。https://segmentfault.com/q/1010000040586828</p><p>2、新建messageBox.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> Confirm <span class="token keyword">from</span> <span class="token string">&#39;./MessageBox.vue&#39;</span>

<span class="token comment">//返回一个实例创建的构造器，但实例构造器需要进行挂载到页面中</span>
<span class="token keyword">let</span> confirmStructor<span class="token operator">=</span>Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>Confirm<span class="token punctuation">)</span> 

<span class="token keyword">let</span> <span class="token function-variable function">theConfirm</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span>rej</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>       
        <span class="token comment">//返回一个promise，进行异步操作，成功时返回，失败时返回</span>
        <span class="token keyword">let</span> confirmDom<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">confirmStructor</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">el</span><span class="token operator">:</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token comment">//在body中动态创建一个div元素，之后此div将会替换成整个vue文件的内容</span>
        <span class="token comment">//此时的confirmDom通俗讲就是相当于是整个组件对象，通过对象调用属性的方法来进行组件中数据的使用</span>
        <span class="token comment">//可以通过$el属性来访问创建的组件实例</span>
        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>confirmDom<span class="token punctuation">.</span>$el<span class="token punctuation">)</span>

        <span class="token comment">//此时进行创建组件的逻辑处理</span>
        confirmDom<span class="token punctuation">.</span>text<span class="token operator">=</span>text       <span class="token comment">//将需要传入的文本内容传给组件实例</span>
        confirmDom<span class="token punctuation">.</span><span class="token function-variable function">ok</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
            <span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//正确时返回的操作</span>
            confirmDom<span class="token punctuation">.</span>flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        confirmDom<span class="token punctuation">.</span><span class="token function-variable function">no</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
            <span class="token function">rej</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//失败时返回的操作</span>
            confirmDom<span class="token punctuation">.</span>flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>    
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">//将逻辑函数进行导出和暴露</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> theConfirm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、mian.js引入挂载到全局</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&#39;./store/index&#39;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">&#39;./router&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> theConfirm <span class="token keyword">from</span> <span class="token string">&#39;./components/messageBox.js&#39;</span>
Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$Myconfirm<span class="token operator">=</span>theConfirm

<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  router<span class="token punctuation">,</span>
  store<span class="token punctuation">,</span>
  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、页面使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$Myconfirm</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">&#39;标题&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token string">&#39;内容&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">btn</span><span class="token operator">:</span><span class="token punctuation">{</span> <span class="token literal-property property">ok</span><span class="token operator">:</span><span class="token string">&#39;确定&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">no</span><span class="token operator">:</span><span class="token string">&#39;取消&#39;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;no&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>资料</p></blockquote>`,24),B={href:"https://blog.csdn.net/weixin_45294459/article/details/126997364",target:"_blank",rel:"noopener noreferrer"},D={href:"https://blog.csdn.net/qq_63358859/article/details/125442312",target:"_blank",rel:"noopener noreferrer"},E={href:"https://www.jb51.net/article/176008.htm",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.cnblogs.com/xuzhudong/p/8631088.html",target:"_blank",rel:"noopener noreferrer"};function U(p,O){const a=l("ExternalLinkIcon");return c(),i("div",null,[k,n("p",null,[n("a",v,[s("绝对干货~Vue小技巧"),t(a)])]),m,n("p",null,[n("a",b,[s("Vue 通信中的 v-model"),t(a)])]),g,n("p",null,[n("a",h,[s("vue样式穿透 ::v-deep"),t(a)])]),y,n("p",null,[n("a",f,[s("VUE的作用域插槽"),t(a)])]),w,n("p",null,[s("应用：针对组件中有元素包裹了slot，如："),n("div",x,[r(p.$slots,"default")]),s("，如果父组件没有填充slot，那么会多个div元素，可能影响布局")]),j,s(" 如下： "),q,n("p",null,[n("a",V,[s("css中class之间＞(大于号)、~(波浪号)、 (空格)、,(逗号)、+(加号)详解"),t(a)])]),_,$,n("p",null,[n("a",I,[s("11+ chrome高级调试技巧，学会效率直接提升666%"),t(a)])]),n("p",null,[n("a",z,[s("前端调试效率低？试试这 10 个 Chrome 开发者工具 使用技巧"),t(a)])]),n("p",null,[n("a",C,[s("前端应该掌握的浏览器调试技巧"),t(a)])]),A,u(" # 原理篇 "),N,n("p",null,[n("a",B,[s("vue实现预览word文档（处理文档流）"),t(a)])]),n("p",null,[n("a",D,[s("Vue中 Vue.extend() 详解及使用"),t(a)])]),n("p",null,[n("a",E,[s("Vue extend的基本用法(实例详解)"),t(a)])]),n("p",null,[n("a",S,[s("Vue.extend的用法"),t(a)])])])}const P=o(d,[["render",U],["__file","01.vue2 奇淫巧技.html.vue"]]);export{P as default};
