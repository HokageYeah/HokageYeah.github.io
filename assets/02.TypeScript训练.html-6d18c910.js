import{_ as l,r as c,o as i,c as r,d as s,e as n,a,w as p,b as o}from"./app-e9249a1b.js";const k={},u=s("h2",{id:"说在前面",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#说在前面","aria-hidden":"true"},"#"),n(" 说在前面")],-1),d={href:"https://github.com/type-challenges/type-challenges/blob/main/README.zh-CN.md",target:"_blank",rel:"noopener noreferrer"},m=s("ul",null,[s("li",null,"🍅 或者 📦 表示是难题"),s("li",null,"❓ 表示重点或者是还有疑问"),s("li",null,"❌ 表示题目未处理"),s("li",null,"🤔 表示题目值得思考"),s("li",null,"🍵 表示题目值得放松一下"),s("li",null,"其他符号没什么含义 ,也可能有值得标注的地方？嗯... 【我肯定是这样认为的】")],-1),v=s("hr",null,null,-1),b={class:"table-of-contents"},y=o(`<hr><h1 id="一、简单" tabindex="-1"><a class="header-anchor" href="#一、简单" aria-hidden="true">#</a> 一、简单</h1><h2 id="混合" tabindex="-1"><a class="header-anchor" href="#混合" aria-hidden="true">#</a> 混合</h2><p>实现 Pick</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
    title<span class="token operator">:</span> <span class="token builtin">string</span>
    description<span class="token operator">:</span> <span class="token builtin">string</span>
    completed<span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">TodoPreview</span> <span class="token operator">=</span> MyPick<span class="token operator">&lt;</span>Todo<span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;completed&#39;</span><span class="token operator">&gt;</span>

<span class="token keyword">const</span> todo<span class="token operator">:</span> TodoPreview <span class="token operator">=</span> <span class="token punctuation">{</span>
    title<span class="token operator">:</span> <span class="token string">&#39;Clean room&#39;</span><span class="token punctuation">,</span>
    completed<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>in</li><li>keyof</li><li>extends</li></ul></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyPick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>

    <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实现元组转换对象" tabindex="-1"><a class="header-anchor" href="#实现元组转换对象" aria-hidden="true">#</a> 实现元组转换对象</h3><p>传入一个元组类型，将这个元组类型转换为对象类型，这个对象类型的键/值都是从元组中遍历出来。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> tuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;tesla&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;model 3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;model X&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;model Y&#39;</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span>

<span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> TupleToObject<span class="token operator">&lt;</span><span class="token keyword">typeof</span> tuple<span class="token operator">&gt;</span> <span class="token comment">// expected { tesla: &#39;tesla&#39;, &#39;model 3&#39;: &#39;model 3&#39;, &#39;model X&#39;: &#39;model X&#39;, &#39;model Y&#39;: &#39;model Y&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container danger"><p class="custom-container-title">错误示例</p></div><details class="custom-container details"><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">TupleToObject<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">K</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="custom-container tip"><p class="custom-container-title">正确答案</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">TupleToObject<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">symbol</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">K</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实现-exclude" tabindex="-1"><a class="header-anchor" href="#实现-exclude" aria-hidden="true">#</a> 实现 exclude</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>never</li><li>extends</li></ul></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyExclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h3 id="实现-include" tabindex="-1"><a class="header-anchor" href="#实现-include" aria-hidden="true">#</a> 实现 Include</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>never</li><li>extends</li></ul></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyInclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h3 id="实现-if" tabindex="-1"><a class="header-anchor" href="#实现-if" aria-hidden="true">#</a> 实现 If</h3><p>实现一个 <code>IF</code> 类型，它接收一个条件类型 <code>C</code> ，一个判断为真时的返回类型 <code>T</code> ，以及一个判断为假时的返回类型 <code>F</code>。 <code>C</code> 只能是 <code>true</code> 或者 <code>false</code>， <code>T</code> 和 <code>F</code> 可以是任意类型。</p><p>example</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> If<span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token operator">&gt;</span>  <span class="token comment">// expected to be &#39;a&#39;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> If<span class="token operator">&lt;</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// expected to be &#39;b&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>boolean</li><li>extends</li></ul></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">If<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">P</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token constant">P</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h2 id="数组系列" tabindex="-1"><a class="header-anchor" href="#数组系列" aria-hidden="true">#</a> 数组系列</h2><h3 id="实现-first" tabindex="-1"><a class="header-anchor" href="#实现-first" aria-hidden="true">#</a> 实现 First</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">arr1</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">type</span> <span class="token class-name">arr2</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>

<span class="token comment">// </span>
<span class="token keyword">type</span> <span class="token class-name">head1</span> <span class="token operator">=</span> First<span class="token operator">&lt;</span>arr1<span class="token operator">&gt;</span> <span class="token comment">// expected to be &#39;a&#39;</span>
<span class="token keyword">type</span> <span class="token class-name">head2</span> <span class="token operator">=</span> First<span class="token operator">&lt;</span>arr2<span class="token operator">&gt;</span> <span class="token comment">// expected to be 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">First<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">F</span><span class="token punctuation">,</span> <span class="token operator">...</span>infer<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">F</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h3 id="实现-end" tabindex="-1"><a class="header-anchor" href="#实现-end" aria-hidden="true">#</a> 实现 End</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">arr1</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">type</span> <span class="token class-name">arr2</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>

<span class="token comment">// </span>
<span class="token keyword">type</span> <span class="token class-name">head1</span> <span class="token operator">=</span> End<span class="token operator">&lt;</span>arr1<span class="token operator">&gt;</span> <span class="token comment">// expected to be &#39;c&#39;</span>
<span class="token keyword">type</span> <span class="token class-name">head2</span> <span class="token operator">=</span> End<span class="token operator">&lt;</span>arr2<span class="token operator">&gt;</span> <span class="token comment">// expected to be 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">End<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span>infer<span class="token punctuation">,</span> <span class="token keyword">infer</span> <span class="token constant">E</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">E</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h3 id="实现-unshitf" tabindex="-1"><a class="header-anchor" href="#实现-unshitf" aria-hidden="true">#</a> 实现 Unshitf</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
<span class="token keyword">type</span> <span class="token class-name">Result</span> <span class="token operator">=</span> Unshift<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">&gt;</span> <span class="token comment">// [0, 1, 2]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Unshift<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h3 id="实现-shitf" tabindex="-1"><a class="header-anchor" href="#实现-shitf" aria-hidden="true">#</a> 实现 Shitf</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Result</span> <span class="token operator">=</span> Shift<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// [2,3,3]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Shift<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token constant">R</span><span class="token operator">:</span><span class="token constant">T</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h3 id="实现-push" tabindex="-1"><a class="header-anchor" href="#实现-push" aria-hidden="true">#</a> 实现 Push</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
<span class="token keyword">type</span> <span class="token class-name">Result</span> <span class="token operator">=</span> Push<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">&gt;</span> <span class="token comment">// [1,2,0]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Push<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h3 id="获取-length" tabindex="-1"><a class="header-anchor" href="#获取-length" aria-hidden="true">#</a> 获取 Length</h3><p>创建一个通用的<code>Length</code>，接受一个<code>readonly</code>的数组，返回这个数组的长度。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">tesla</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;tesla&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;model 3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;model X&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;model Y&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">type</span> <span class="token class-name">spaceX</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;FALCON 9&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;FALCON HEAVY&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;DRAGON&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;STARSHIP&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;HUMAN SPACEFLIGHT&#39;</span><span class="token punctuation">]</span>

<span class="token keyword">type</span> <span class="token class-name">teslaLength</span> <span class="token operator">=</span> Length<span class="token operator">&lt;</span>tesla<span class="token operator">&gt;</span> <span class="token comment">// expected 4</span>
<span class="token keyword">type</span> <span class="token class-name">spaceXLength</span> <span class="token operator">=</span> Length<span class="token operator">&lt;</span>spaceX<span class="token operator">&gt;</span> <span class="token comment">// expected 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>extends</li><li>ts中获取数组获取长度的方式</li></ul></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Length<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h3 id="实现-concat" tabindex="-1"><a class="header-anchor" href="#实现-concat" aria-hidden="true">#</a> 实现 concat</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>数组的解构赋值</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Concat<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">U</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h3 id="实现-reverse" tabindex="-1"><a class="header-anchor" href="#实现-reverse" aria-hidden="true">#</a> 实现 Reverse</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> Reverse<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// [4, 3, 2, 1]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">构造一个数组存放反转数组</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 解法一</span>
<span class="token keyword">type</span> <span class="token class-name">Reverse<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">,</span> <span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span> <span class="token operator">?</span> Reverse<span class="token operator">&lt;</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">U</span>

<span class="token comment">// 解法二</span>
<span class="token keyword">type</span> <span class="token class-name">Reverse<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">F</span><span class="token punctuation">,</span> <span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token operator">...</span>Reverse<span class="token operator">&lt;</span><span class="token constant">F</span><span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token constant">T</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实现-lastindexof" tabindex="-1"><a class="header-anchor" href="#实现-lastindexof" aria-hidden="true">#</a> 📦 实现 LastIndexOf</h3><p>实现Array.lastIndexOf的类型版本，lastIndexOf&lt;T，U&gt;获取数组T，任意U，并返回数组T中最后一个U的索引</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Res1</span> <span class="token operator">=</span> LastIndexOf<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&gt;</span> <span class="token comment">// 3</span>
<span class="token keyword">type</span> <span class="token class-name">Res2</span> <span class="token operator">=</span> LastIndexOf<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&gt;</span> <span class="token comment">// -1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">递归遍历整个数组，使用变量保存下标</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">LastIndexOf<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token constant">M</span> <span class="token keyword">extends</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">N</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">A</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">B</span><span class="token punctuation">]</span>
  <span class="token operator">?</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span>
  <span class="token operator">?</span> LastIndexOf<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">N</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">N</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">:</span> LastIndexOf<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">N</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
  <span class="token operator">:</span> <span class="token constant">M</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实现-combination" tabindex="-1"><a class="header-anchor" href="#实现-combination" aria-hidden="true">#</a> 📦 实现 Combination</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// expected to be \`&quot;foo&quot; | &quot;bar&quot; | &quot;baz&quot; | &quot;foo bar&quot; | &quot;foo bar baz&quot; | &quot;foo baz&quot; | &quot;foo baz bar&quot; | &quot;bar foo&quot; | &quot;bar foo baz&quot; | &quot;bar baz&quot; | &quot;bar baz foo&quot; | &quot;baz foo&quot; | &quot;baz foo bar&quot; | &quot;baz bar&quot; | &quot;baz bar foo&quot;\`</span>
<span class="token keyword">type</span> <span class="token class-name">Keys</span> <span class="token operator">=</span> Combination<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">递归遍历整个数组</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">IsExist<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">O</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span>
  <span class="token operator">?</span> <span class="token constant">L</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">O</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> IsExist<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">O</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token boolean">false</span>



<span class="token keyword">type</span> <span class="token class-name">Unique<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">N</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span> <span class="token operator">?</span>
  IsExist<span class="token operator">&lt;</span><span class="token constant">N</span><span class="token punctuation">,</span> <span class="token constant">L</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">false</span></span> <span class="token operator">?</span> Unique<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">N</span><span class="token punctuation">,</span> <span class="token constant">L</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
  <span class="token operator">:</span> Unique<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">N</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">N</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实现-filter" tabindex="-1"><a class="header-anchor" href="#实现-filter" aria-hidden="true">#</a> 📦 实现 Filter</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Filtered</span> <span class="token operator">=</span> FilterOut<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token operator">&gt;</span> <span class="token comment">// [1, 2, 3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
<span class="token keyword">type</span> <span class="token class-name">FilterOut<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Rest<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token constant">L</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token constant">U</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>FilterOut<span class="token operator">&lt;</span>Rest<span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">...</span>FilterOut<span class="token operator">&lt;</span>Rest<span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token constant">T</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,66),g={href:"https://github.com/type-challenges/type-challenges/issues/27566",target:"_blank",rel:"noopener noreferrer"},w=o(`<h3 id="实现-unique" tabindex="-1"><a class="header-anchor" href="#实现-unique" aria-hidden="true">#</a> 实现 Unique</h3><p>数组去重</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Res</span> <span class="token operator">=</span> Unique<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// expected to be [1, 2, 3]</span>
<span class="token keyword">type</span> <span class="token class-name">Res1</span> <span class="token operator">=</span> Unique<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// expected to be [1, 2, 3, 4, 5, 6, 7]</span>
<span class="token keyword">type</span> <span class="token class-name">Res2</span> <span class="token operator">=</span> Unique<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// expected to be [1, &quot;a&quot;, 2, &quot;b&quot;]</span>
<span class="token keyword">type</span> <span class="token class-name">Res3</span> <span class="token operator">=</span> Unique<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// expected to be [string, number, 1, &quot;a&quot;, 2, &quot;b&quot;]</span>
<span class="token keyword">type</span> <span class="token class-name">Res4</span> <span class="token operator">=</span> Unique<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token builtin">unknown</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">never</span><span class="token punctuation">,</span> <span class="token builtin">never</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// expected to be [unknown, any, never]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">递归遍历整个数组</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">IsExist<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">O</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span>
  <span class="token operator">?</span> <span class="token constant">L</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">O</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> IsExist<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">O</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token boolean">false</span>



<span class="token keyword">type</span> <span class="token class-name">Unique<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">N</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span> <span class="token operator">?</span>
  IsExist<span class="token operator">&lt;</span><span class="token constant">N</span><span class="token punctuation">,</span> <span class="token constant">L</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">false</span></span> <span class="token operator">?</span> Unique<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">N</span><span class="token punctuation">,</span> <span class="token constant">L</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
  <span class="token operator">:</span> Unique<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">N</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">N</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实现-getmiddleelement" tabindex="-1"><a class="header-anchor" href="#实现-getmiddleelement" aria-hidden="true">#</a> 实现 GetMiddleElement</h3><p>如果是奇数长度，取中间一个数，如果是偶数，取中间两个数。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">simple1</span> <span class="token operator">=</span> GetMiddleElement<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// expected to be [3]</span>
<span class="token keyword">type</span> <span class="token class-name">simple2</span> <span class="token operator">=</span> GetMiddleElement<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// expected to be [3, 4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">递归遍历整个数组，判断长度什么时候可以递归结束；以及使用infer如何提取中间内容</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">GetMiddleElement<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>
  <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span>
  <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">]</span> <span class="token operator">?</span> GetMiddleElement<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span> <span class="token operator">:</span><span class="token builtin">never</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实现-appear-only-once" tabindex="-1"><a class="header-anchor" href="#实现-appear-only-once" aria-hidden="true">#</a> 实现 Appear only once</h3><p>查找目标数组中只出现一次的元素。例如：输入：[1，2，3，3，4，5，6，6，6]，输出：[1，4，5]。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">simple1</span> <span class="token operator">=</span> GetMiddleElement<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// expected to be [3]</span>
<span class="token keyword">type</span> <span class="token class-name">simple2</span> <span class="token operator">=</span> GetMiddleElement<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// expected to be [3, 4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">可以使用一个辅助类判断是否一个元素是否重复，重复不添加，反之添加</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 辅助类 是否重复</span>
<span class="token keyword">type</span> <span class="token class-name">IsRepeated<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">N</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">L</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span>
  <span class="token operator">?</span> IsRepeated<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">N</span><span class="token punctuation">,</span> <span class="token constant">L</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">:</span> IsRepeated<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">N</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">N</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span>

<span class="token comment">// 结果</span>
<span class="token keyword">type</span> <span class="token class-name">UniqueArray<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">O</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span> <span class="token operator">?</span>
  IsRepeated<span class="token operator">&lt;</span><span class="token constant">O</span><span class="token punctuation">,</span> <span class="token constant">L</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> UniqueArray<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">O</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span> <span class="token operator">:</span> UniqueArray<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">O</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">L</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">U</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实现数组扁平化" tabindex="-1"><a class="header-anchor" href="#实现数组扁平化" aria-hidden="true">#</a> 实现数组扁平化</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">flatten</span> <span class="token operator">=</span> Flatten<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// [1, 2, 3, 4, 5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">递归</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 解法一</span>
<span class="token keyword">type</span> <span class="token class-name">Flatten<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">O</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">F</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token constant">F</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> Flatten<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">F</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">R</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">O</span><span class="token operator">&gt;</span> <span class="token operator">:</span> Flatten<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">O</span><span class="token punctuation">,</span> <span class="token constant">F</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token constant">O</span>

<span class="token comment">// 解法二 不使用额外参数</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">F</span><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span>
  <span class="token operator">?</span> <span class="token constant">L</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">F</span><span class="token operator">&lt;</span><span class="token constant">L</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">F</span><span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">F</span><span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token constant">T</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="指定深度扁平化" tabindex="-1"><a class="header-anchor" href="#指定深度扁平化" aria-hidden="true">#</a> 指定深度扁平化</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">a</span> <span class="token operator">=</span> FlattenDepth<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&gt;</span> <span class="token comment">// [1, 2, 3, 4, [5]]. flattern 2 times</span>
<span class="token keyword">type</span> <span class="token class-name">b</span> <span class="token operator">=</span> FlattenDepth<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// [1, 2, 3, 4, [[5]]]. Depth defaults to be 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">参考数组深度扁平化，可以利用数组 \`length\` 属性，实现指定长度判断</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 先实现看看 深度递归扁平化</span>
<span class="token keyword">type</span> <span class="token class-name">FlattenDepth<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">D</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> 
<span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span>
  <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token constant">L</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>FlattenDepth<span class="token operator">&lt;</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">D</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">...</span>FlattenDepth<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">D</span><span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">...</span>FlattenDepth<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">D</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token constant">T</span>


<span class="token comment">// 加上长度判断就可以实现指定深度扁平化了</span>
<span class="token comment">// 答案</span>
<span class="token keyword">type</span> <span class="token class-name">FlattenDepth<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">D</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> 
  <span class="token constant">D</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span>
  <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span>
  <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token constant">L</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>FlattenDepth<span class="token operator">&lt;</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">D</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">...</span>FlattenDepth<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">D</span><span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">...</span>FlattenDepth<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">D</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token constant">T</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实现指定删除数组内容" tabindex="-1"><a class="header-anchor" href="#实现指定删除数组内容" aria-hidden="true">#</a> 实现指定删除数组内容</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Res</span> <span class="token operator">=</span> Without<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// expected to be [2]</span>
<span class="token keyword">type</span> <span class="token class-name">Res1</span> <span class="token operator">=</span> Without<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// expected to be [4, 5]</span>
<span class="token keyword">type</span> <span class="token class-name">Res2</span> <span class="token operator">=</span> Without<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// expected to be []</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">解法有很多，判断内容是否存在与指定内容中，或者使用 联合类型</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 解法一 转换成联合类型</span>
<span class="token keyword">type</span> <span class="token class-name">ToUnion<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token constant">T</span>
<span class="token keyword">type</span> <span class="token class-name">Without<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token builtin">any</span> <span class="token operator">|</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span> <span class="token operator">?</span>
  <span class="token constant">L</span> <span class="token keyword">extends</span> <span class="token class-name">ToUnion<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> Without<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">...</span>Without<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token constant">T</span>

<span class="token comment">// 解法二 判断法 </span>
<span class="token keyword">type</span> <span class="token class-name">IsExist<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span> <span class="token operator">|</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">A</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">B</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> IsExist<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span>


<span class="token keyword">type</span> <span class="token class-name">Without<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">O</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>
  <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token constant">O</span>
  <span class="token operator">:</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span>
  <span class="token operator">?</span>
  IsExist<span class="token operator">&lt;</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> Without<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">O</span><span class="token operator">&gt;</span> <span class="token operator">:</span> Without<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">O</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
  <span class="token operator">:</span> <span class="token constant">O</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p><strong>拓展</strong></p><ul><li>尝试使用 <code>Pop</code> 或者 <code>shift</code> 方法实现！</li></ul><h3 id="实现给定长度的数组" tabindex="-1"><a class="header-anchor" href="#实现给定长度的数组" aria-hidden="true">#</a> 实现给定长度的数组</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> ConstructTuple<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">&gt;</span> <span class="token comment">// expect to be [unknown, unkonwn]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ConstructTuple<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">R</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> ConstructTuple<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h3 id="实现矩阵变换" tabindex="-1"><a class="header-anchor" href="#实现矩阵变换" aria-hidden="true">#</a> 🍅 实现矩阵变换</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Matrix</span> <span class="token operator">=</span> Transpose <span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// expected to be [[1]]</span>
<span class="token keyword">type</span> <span class="token class-name">Matrix1</span> <span class="token operator">=</span> Transpose <span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// expected to be [[1, 3], [2, 4]]</span>
<span class="token keyword">type</span> <span class="token class-name">Matrix2</span> <span class="token operator">=</span> Transpose <span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// expected to be [[1, 4], [2, 5], [3, 6]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ConstructTuple<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">R</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> ConstructTuple<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h2 id="readonly-系列" tabindex="-1"><a class="header-anchor" href="#readonly-系列" aria-hidden="true">#</a> ReadOnly 系列</h2><h3 id="实现-readonly" tabindex="-1"><a class="header-anchor" href="#实现-readonly" aria-hidden="true">#</a> 实现 Readonly</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
    title<span class="token operator">:</span> <span class="token builtin">string</span>
    description<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> todo<span class="token operator">:</span> MyReadonly<span class="token operator">&lt;</span>Todo<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    title<span class="token operator">:</span> <span class="token string">&quot;Hey&quot;</span><span class="token punctuation">,</span>
    description<span class="token operator">:</span> <span class="token string">&quot;foobar&quot;</span>
<span class="token punctuation">}</span>

todo<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span> <span class="token comment">// Error: cannot reassign a readonly property</span>
todo<span class="token punctuation">.</span>description <span class="token operator">=</span> <span class="token string">&quot;barFoo&quot;</span> <span class="token comment">// Error: cannot reassign a readonly property</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token operator">+</span><span class="token keyword">readonly</span> <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实现-deepreadonly" tabindex="-1"><a class="header-anchor" href="#实现-deepreadonly" aria-hidden="true">#</a> 🍔 实现 DeepReadOnly</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">X</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
    b<span class="token operator">:</span> <span class="token punctuation">{</span>
        c<span class="token operator">:</span> <span class="token punctuation">{</span>
            a<span class="token operator">:</span> <span class="token string">&#39;role&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Expected</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token keyword">readonly</span> x<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token keyword">readonly</span> a<span class="token operator">:</span> <span class="token number">1</span>
        <span class="token keyword">readonly</span> b<span class="token operator">:</span> <span class="token string">&#39;hi&#39;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">readonly</span> y<span class="token operator">:</span> <span class="token string">&#39;hey&#39;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>我个人感觉这种写法不好理解</p><ul><li>keyof</li><li>in</li><li>extends</li><li>never</li></ul></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">DeepReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">never</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">readonly</span> <span class="token punctuation">[</span>k <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> DeepReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h3 id="实现-mutable" tabindex="-1"><a class="header-anchor" href="#实现-mutable" aria-hidden="true">#</a> 🍔 实现 Mutable</h3><p>实现一个通用的类型 <code>Mutable&lt;T&gt;</code>，使类型 <code>T</code> 的全部属性可变（非只读）。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> title<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token keyword">readonly</span> description<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token keyword">readonly</span> completed<span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">MutableTodo</span> <span class="token operator">=</span> Mutable<span class="token operator">&lt;</span>Todo<span class="token operator">&gt;</span> <span class="token comment">// { title: string; description: string; completed: boolean; }</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">**+readonly** 表示只读， **-readonly** 表示可读写</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Mutable<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">-</span><span class="token keyword">readonly</span> <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实现-deepmutable" tabindex="-1"><a class="header-anchor" href="#实现-deepmutable" aria-hidden="true">#</a> 🍔 实现 DeepMutable</h3><p>实现递归可读写</p><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">DeepReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">never</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token keyword">readonly</span> <span class="token punctuation">[</span>k <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> DeepReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h1 id="二、中等" tabindex="-1"><a class="header-anchor" href="#二、中等" aria-hidden="true">#</a> 二、中等</h1><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h2><h3 id="实现字符串首字母大写" tabindex="-1"><a class="header-anchor" href="#实现字符串首字母大写" aria-hidden="true">#</a> 实现字符串首字母大写</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">capitalized</span> <span class="token operator">=</span> Capitalize<span class="token operator">&lt;</span><span class="token string">&#39;hello world&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// expected to be &#39;Hello world&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">\`ts\` 中字符串转换成大写 \`Uppercase\`;小写是 \`Lowercase\`</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Capitalize<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">F</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Uppercase<span class="token operator">&lt;</span><span class="token constant">F</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token constant">T</span> 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></details><p>拓展</p><ul><li>实现 全部大写</li><li>实现 全部小写</li></ul><h3 id="实现字符串替换" tabindex="-1"><a class="header-anchor" href="#实现字符串替换" aria-hidden="true">#</a> 实现字符串替换</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">replaced</span> <span class="token operator">=</span> Replace<span class="token operator">&lt;</span><span class="token string">&#39;types are fun!&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fun&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;awesome&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// expected to be &#39;types are awesome!&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">使用infer提取，需要考虑空字符串情况</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Replace<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">F</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token string">&#39;&#39;</span> <span class="token operator">?</span> <span class="token constant">S</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
    <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">F</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token operator">?</span>  <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">T</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token operator">:</span> <span class="token constant">S</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p><strong>拓展</strong></p><p>实现全局替换</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">replaced</span> <span class="token operator">=</span> ReplaceAll<span class="token operator">&lt;</span><span class="token string">&#39;fun types fun are fun!&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fun&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;awesome&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// expected to be &#39;awesome types awesome are awesome!&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">根据上面使用递归就可以了</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ReplaceAll<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">F</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token string">&#39;&#39;</span> <span class="token operator">?</span> <span class="token constant">S</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
    <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">F</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> ReplaceAll<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">T</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token constant">F</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">S</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实现获取字符串长度" tabindex="-1"><a class="header-anchor" href="#实现获取字符串长度" aria-hidden="true">#</a> 实现获取字符串长度</h3><div class="custom-container tip"><p class="custom-container-title">字符串是是无法直接获取长度，转换成数组，通过递归遍历然后获取</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">StrLen<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> Arr <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">F</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> StrLen<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>Arr<span class="token punctuation">,</span> <span class="token constant">F</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">A</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>// eg type B = StrLen&lt;&quot;javascript&quot;&gt; // 10</p></details><h3 id="实现字符串转换联合类型" tabindex="-1"><a class="header-anchor" href="#实现字符串转换联合类型" aria-hidden="true">#</a> 实现字符串转换联合类型</h3><p>实现一个接收string,number或bigInt类型参数的Absolute类型,返回一个正数字符串</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Test</span> <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Result</span> <span class="token operator">=</span> StringToUnion<span class="token operator">&lt;</span>Test<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// expected to be &quot;1&quot; | &quot;2&quot; | &quot;3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">用infer递归处理</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">StringToUnion<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">F</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> <span class="token constant">F</span> <span class="token operator">|</span> StringToUnion<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token builtin">never</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h3 id="实现是否是给定字符串开头" tabindex="-1"><a class="header-anchor" href="#实现是否是给定字符串开头" aria-hidden="true">#</a> 实现是否是给定字符串开头</h3><p>实现StartsWith&lt;T, U&gt;,接收两个string类型参数,然后判断T是否以U开头,根据结果返回true或false</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">a</span> <span class="token operator">=</span> StartsWith<span class="token operator">&lt;</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ac&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// expected to be false</span>
<span class="token keyword">type</span> <span class="token class-name">b</span> <span class="token operator">=</span> StartsWith<span class="token operator">&lt;</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ab&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// expected to be true</span>
<span class="token keyword">type</span> <span class="token class-name">c</span> <span class="token operator">=</span> StartsWith<span class="token operator">&lt;</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;abcd&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// expected to be false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
<span class="token keyword">type</span> <span class="token class-name">StartsWith<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">U</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></details><p><strong>拓展</strong> 判断是否是指定字符串结尾</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
<span class="token keyword">type</span> <span class="token class-name">End<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">U</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><h3 id="实现去掉字符串空格" tabindex="-1"><a class="header-anchor" href="#实现去掉字符串空格" aria-hidden="true">#</a> 实现去掉字符串空格</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">trimed</span> <span class="token operator">=</span> TrimLeft<span class="token operator">&lt;</span><span class="token string">&#39;  Hello World  &#39;</span><span class="token operator">&gt;</span> <span class="token comment">// expected to be &#39;Hello World  </span>
<span class="token keyword">type</span> <span class="token class-name">trimed1</span> <span class="token operator">=</span> TrimRright<span class="token operator">&lt;</span><span class="token string">&#39;  Hello World  &#39;</span><span class="token operator">&gt;</span> <span class="token comment">// expected to be &#39;Hello World  </span>
<span class="token keyword">type</span> <span class="token class-name">trimed2</span> <span class="token operator">=</span> Trim<span class="token operator">&lt;</span><span class="token string">&#39;  Hello World  &#39;</span><span class="token operator">&gt;</span> <span class="token comment">// expected to be &#39;Hello World  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">把字符串当数组理解，数组是如何提取，字符串就如何提取</p><ul><li><p>递归</p></li><li><p>infer</p></li></ul></div><details class="custom-container details"><summary>查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 一次性解决吧</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">S</span></span> <span class="token operator">=</span> <span class="token string">&#39; &#39;</span>
<span class="token keyword">type</span> <span class="token class-name">TrimLeft<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">S</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> TrimLeft<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token operator">:</span><span class="token constant">T</span>
<span class="token keyword">type</span> <span class="token class-name">TrimRright<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">S</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> TrimRright<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token operator">:</span><span class="token constant">T</span>
<span class="token keyword">type</span> <span class="token class-name">Trim<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">S</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">S</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> Trim<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token operator">:</span><span class="token constant">T</span>
<span class="token comment">// 看了答案s = &#39; &#39;不准确，使用 S = &#39; &#39; | &#39;\\n&#39; | &#39;\\t&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实现删除符合要求的字符串" tabindex="-1"><a class="header-anchor" href="#实现删除符合要求的字符串" aria-hidden="true">#</a> 实现删除符合要求的字符串</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Butterfly</span> <span class="token operator">=</span> DropChar<span class="token operator">&lt;</span><span class="token string">&#39; b u t t e r f l y ! &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;butterfly!&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>递归！！！注意保存每次删除之后的值</p></blockquote><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">DropChar<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">S</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token operator">?</span> DropChar<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token constant">S</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">T</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实现驼峰命名转换短横线命名" tabindex="-1"><a class="header-anchor" href="#实现驼峰命名转换短横线命名" aria-hidden="true">#</a> ✂️ 实现驼峰命名转换短横线命名</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">FooBarBaz</span> <span class="token operator">=</span> KebabCase<span class="token operator">&lt;</span><span class="token string">&quot;FooBarBaz&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> foobarbaz<span class="token operator">:</span> FooBarBaz <span class="token operator">=</span> <span class="token string">&quot;foo-bar-baz&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">DoNothing</span> <span class="token operator">=</span> KebabCase<span class="token operator">&lt;</span><span class="token string">&quot;do-nothing&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> doNothing<span class="token operator">:</span> DoNothing <span class="token operator">=</span> <span class="token string">&quot;do-nothing&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">D</span></span> <span class="token operator">=</span> Uncapitalize<span class="token operator">&lt;</span><span class="token string">&quot;FooBarBaz&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">用infer递归处理</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 第一步写出基本形式</span>
<span class="token keyword">type</span> <span class="token class-name">KebabCase<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">S1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">S2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Uncapitalize<span class="token operator">&lt;</span><span class="token constant">S1</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Uncapitalize<span class="token operator">&lt;</span><span class="token constant">S2</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token operator">:</span><span class="token constant">S</span>
<span class="token comment">// 判断 S2 开头是否大写，如果是大写，转换成小写，同时在前面添加短横线，</span>
<span class="token comment">// 递归 infer 提取的 S2</span>
<span class="token keyword">type</span> <span class="token class-name">KebabCase<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">S1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">S2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> <span class="token punctuation">(</span>
  <span class="token constant">S2</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Uncapitalize<span class="token operator">&lt;</span><span class="token constant">S2</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token operator">?</span>  <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Uncapitalize<span class="token operator">&lt;</span><span class="token constant">S1</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>KebabCase<span class="token operator">&lt;</span><span class="token constant">S2</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Uncapitalize<span class="token operator">&lt;</span><span class="token constant">S1</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>KebabCase<span class="token operator">&lt;</span><span class="token constant">S2</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">S</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="现判断一个字符串中字符是否重复" tabindex="-1"><a class="header-anchor" href="#现判断一个字符串中字符是否重复" aria-hidden="true">#</a> 🍅 现判断一个字符串中字符是否重复</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">S1</span></span> <span class="token operator">=</span> CheckRepeatedChars<span class="token operator">&lt;</span><span class="token string">&#39;abc&#39;</span><span class="token operator">&gt;</span>  <span class="token comment">// false</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">S2</span></span> <span class="token operator">=</span> CheckRepeatedChars<span class="token operator">&lt;</span><span class="token string">&#39;aba&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">可以参考数组判断重复，借助辅助函数判断是否重复</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 辅助函数 判断指定字符串是否重复</span>
<span class="token keyword">type</span> <span class="token class-name">IsRepeated<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">M</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span>
  <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">L</span></span> <span class="token operator">?</span> IsRepeated<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">M</span><span class="token punctuation">,</span> <span class="token constant">L</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">:</span> IsRepeated<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">&gt;</span>
  <span class="token operator">:</span> <span class="token constant">M</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span>

<span class="token comment">// 结果</span>
<span class="token keyword">type</span> <span class="token class-name">CheckRepeatedChars<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">O</span> <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> 
<span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> 
<span class="token operator">?</span> IsRepeated<span class="token operator">&lt;</span><span class="token constant">O</span><span class="token punctuation">,</span> <span class="token constant">L</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> CheckRepeatedChars<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">O</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token boolean">false</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实现-单词首字母大写" tabindex="-1"><a class="header-anchor" href="#实现-单词首字母大写" aria-hidden="true">#</a> 🍅 实现 单词首字母大写</h3><p>实现<code>CapitalWords</code>，它将字符串中每个单词的第一个字母转换为大写字母，其余部分保持原样。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">H1</span></span> <span class="token operator">=</span> CapitalizeWords<span class="token operator">&lt;</span><span class="token string">&quot;A&quot;</span><span class="token operator">&gt;</span> <span class="token comment">// =&gt; &#39;A&#39;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">H2</span></span> <span class="token operator">=</span> CapitalizeWords<span class="token operator">&lt;</span><span class="token string">&quot;AB&quot;</span><span class="token operator">&gt;</span><span class="token comment">// =&gt; &#39;Ab&#39;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">H3</span></span> <span class="token operator">=</span> CapitalizeWords<span class="token operator">&lt;</span><span class="token string">&quot;ABC&quot;</span><span class="token operator">&gt;</span> <span class="token comment">// =&gt; &#39;Abc&#39;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">H4</span></span> <span class="token operator">=</span> CapitalizeWords<span class="token operator">&lt;</span><span class="token string">&quot; ABC&quot;</span><span class="token operator">&gt;</span> <span class="token comment">// =&gt; &quot; Abc&quot;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">H5</span></span> <span class="token operator">=</span> CapitalizeWords<span class="token operator">&lt;</span><span class="token string">&quot; ABC &quot;</span><span class="token operator">&gt;</span> <span class="token comment">//  =&gt; &#39; Abc &#39;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">H6</span></span> <span class="token operator">=</span> CapitalizeWords<span class="token operator">&lt;</span><span class="token string">&quot; ABC aDmin&quot;</span><span class="token operator">&gt;</span> <span class="token comment">// =&gt; &#39; Abc Admin &#39;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">H7</span></span> <span class="token operator">=</span> CapitalizeWords<span class="token operator">&lt;</span><span class="token string">&quot;Hello world hElLO WORlD&quot;</span><span class="token operator">&gt;</span> <span class="token comment">// =&gt; Hello World Hello World</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,102),h={class:"custom-container tip"},x=s("p",{class:"custom-container-title"},"分析",-1),f={href:"https://github.com/type-challenges/type-challenges/blob/main/questions/00112-hard-capitalizewords/README.md",target:"_blank",rel:"noopener noreferrer"},T=s("li",null,"使用虚拟头节点，将 Head 指向上一次遍历的字符串",-1),R=o('<details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Line</span> <span class="token operator">=</span> <span class="token string">&quot;_&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;__&quot;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">CamelCase<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> Head <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token constant">W</span> <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token operator">?</span> <span class="token constant">L</span> <span class="token keyword">extends</span> <span class="token class-name">Line</span> <span class="token operator">?</span> CamelCase<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">L</span><span class="token punctuation">,</span> <span class="token constant">W</span><span class="token operator">&gt;</span> <span class="token operator">:</span> Head <span class="token keyword">extends</span> <span class="token class-name">Line</span> <span class="token operator">?</span> CamelCase<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">L</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">W</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Uppercase<span class="token operator">&lt;</span><span class="token constant">L</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token operator">&gt;</span> <span class="token operator">:</span> CamelCase<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">L</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">W</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Lowercase<span class="token operator">&lt;</span><span class="token constant">L</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">W</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Lowercase<span class="token operator">&lt;</span><span class="token constant">L</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token constant">W</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>',1),A={href:"https://github.com/type-challenges/type-challenges/issues/27563",target:"_blank",rel:"noopener noreferrer"},_=o('<h3 id="实现-camelcase" tabindex="-1"><a class="header-anchor" href="#实现-camelcase" aria-hidden="true">#</a> 🍅 实现 CamelCase</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">camelCase1</span> <span class="token operator">=</span> CamelCase<span class="token operator">&lt;</span><span class="token string">&#39;hello_world_with_types&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// expected to be &#39;helloWorldWithTypes&#39;</span>\n<span class="token keyword">type</span> <span class="token class-name">camelCase2</span> <span class="token operator">=</span> CamelCase<span class="token operator">&lt;</span><span class="token string">&#39;HELLO_WORLD_WITH_TYPES&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// expected to be same as previous one</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">分析</p><ul><li><p>隐含条件，不只是将第一个单词大写，还必须将后面相连的字母小写！！！</p></li><li><p>本题难度在于如果只有一个字符串情况下第一个首字母大写，如 <code>A</code> = &gt;<code>A</code>,<code>a</code>=<code>A</code>,<code>AB</code> = &gt;<code>Ab</code>,<code>ab</code>=&gt;<code>Ab</code>，<code>aB</code>=&gt;<code>Ab</code></p></li><li><p>如果直接判断话容易错误，该题有点像链表遍历，因此采用虚拟头节点，不管有没有内容，头节点默认为 &quot;&quot;[空字符串]</p></li></ul></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 空字符串情况</span>\n<span class="token keyword">type</span> <span class="token class-name">Space</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span> <span class="token operator">|</span> <span class="token string">&quot; &quot;</span> <span class="token operator">|</span> <span class="token string">&quot;\\n&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;\\t&quot;</span>\n\n<span class="token comment">// Head 为虚拟头节点，默认为 &quot;&quot;</span>\n<span class="token comment">// 不仅要判断头节点为空！还要判断下一个节点是否为空</span>\n<span class="token keyword">type</span> <span class="token class-name">CapitalizeWords<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> Head <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token constant">W</span> <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>\n  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> Head <span class="token keyword">extends</span> <span class="token class-name">Space</span> <span class="token operator">?</span> <span class="token constant">L</span> <span class="token keyword">extends</span> <span class="token class-name">Space</span> <span class="token operator">?</span>\n  CapitalizeWords<span class="token operator">&lt;</span>Lowercase<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token constant">L</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">W</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token operator">&gt;</span> <span class="token operator">:</span>\n  CapitalizeWords<span class="token operator">&lt;</span>Lowercase<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token constant">L</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">W</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Uppercase<span class="token operator">&lt;</span><span class="token constant">L</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token operator">&gt;</span> <span class="token operator">:</span> CapitalizeWords<span class="token operator">&lt;</span>Lowercase<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token constant">L</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">W</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">W</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>',4),q={href:"https://github.com/HokageYeah",target:"_blank",rel:"noopener noreferrer"},U=o(`<h3 id="实现-lengthofstring" tabindex="-1"><a class="header-anchor" href="#实现-lengthofstring" aria-hidden="true">#</a> ❓ 实现 LengthOfString</h3><p>这个问题不同于上面 <a href="#%E5%AE%9E%E7%8E%B0%E8%8E%B7%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6"><code>实现获取字符串长度</code></a></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T0</span></span> <span class="token operator">=</span> LengthOfString<span class="token operator">&lt;</span><span class="token string">&quot;foo&quot;</span><span class="token operator">&gt;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">问题不难！但它们都受到TypeScript的递归限制的限制，这是这个问题的主要约束</p></div><p><img src="https://cdn.staticaly.com/gh/wuxin0011/blog-resource@main/vue-page/image-20230522113503902.png" alt="LengthOfString"></p><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
<span class="token comment">// todo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></details>`,6),B={href:"https://www.bing.com",target:"_blank",rel:"noopener noreferrer"},L=o(`<h2 id="函数系列" tabindex="-1"><a class="header-anchor" href="#函数系列" aria-hidden="true">#</a> 函数系列</h2><h3 id="实现获取函数返回类型" tabindex="-1"><a class="header-anchor" href="#实现获取函数返回类型" aria-hidden="true">#</a> 实现获取函数返回类型</h3><p>不使用 ReturnType 实现 TypeScript 的 <code>ReturnType&lt;T&gt;</code> 泛型。 example:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>v<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">else</span>
        <span class="token keyword">return</span> <span class="token number">2</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">a</span> <span class="token operator">=</span> MyReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> fn<span class="token operator">&gt;</span> <span class="token comment">// 应推导出 &quot;1 | 2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>ts中函数表示方式，可以使用关键词<code>infer</code>提取函数返回类型</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">never</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h3 id="实现参数追加" tabindex="-1"><a class="header-anchor" href="#实现参数追加" aria-hidden="true">#</a> 实现参数追加</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span>

<span class="token keyword">type</span> <span class="token class-name">Result</span> <span class="token operator">=</span> AppendArgument<span class="token operator">&lt;</span>Fn<span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span> 
<span class="token comment">// expected be (a: number, b: string, x: boolean) =&gt; number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">函数表现形式以及参数和返回类型提取</p></div><h3 id="实现函数参数反转" tabindex="-1"><a class="header-anchor" href="#实现函数参数反转" aria-hidden="true">#</a> 实现函数参数反转</h3><p>本题可以参考数组反转</p><div class="language-TS line-numbers-mode" data-ext="TS"><pre class="language-TS"><code>type Flipped = FlipArguments&lt;(arg0: string, arg1: number, arg2: boolean) =&gt; void&gt;
// (arg0: boolean, arg1: number, arg2: string) =&gt; void
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 提供一个反转数组类型</span>
<span class="token keyword">type</span> <span class="token class-name">Reverse<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">F</span><span class="token punctuation">,</span> <span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token operator">...</span>Reverse<span class="token operator">&lt;</span><span class="token constant">F</span><span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token constant">T</span>

<span class="token comment">// 参数反转</span>
<span class="token keyword">type</span> <span class="token class-name">FlipArguments<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> Args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span>
  <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> Reverse<span class="token operator">&lt;</span>Args<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">never</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="object-系列" tabindex="-1"><a class="header-anchor" href="#object-系列" aria-hidden="true">#</a> Object 系列</h2><h3 id="实现连两个对象合并" tabindex="-1"><a class="header-anchor" href="#实现连两个对象合并" aria-hidden="true">#</a> 实现连两个对象合并</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">foo</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">coo</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  sex<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Result</span> <span class="token operator">=</span> Merge<span class="token operator">&lt;</span>foo<span class="token punctuation">,</span>coo<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// expected to be {name: string, age: number, sex: string}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">参考上面给对象添加新属性案例，注意后面对象同名属性必须要覆盖前面对象这个要求</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Merge<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">J</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">U</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token constant">J</span> <span class="token operator">|</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> key <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">J</span></span> <span class="token operator">?</span> <span class="token constant">U</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">(</span>key <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">K</span></span> <span class="token operator">?</span> <span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实现可配置可选链" tabindex="-1"><a class="header-anchor" href="#实现可配置可选链" aria-hidden="true">#</a> 🚪实现可配置可选链</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">const</span> config<span class="token operator">:</span> Chainable


<span class="token keyword">const</span> result <span class="token operator">=</span> config
    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;type-challenges&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&#39;Hello World&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// expect the type of result to be:</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">TR</span></span> <span class="token operator">=</span> <span class="token keyword">typeof</span> result<span class="token punctuation">;</span>
<span class="token keyword">interface</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span>
    foo<span class="token operator">:</span> <span class="token builtin">number</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span>
    bar<span class="token operator">:</span> <span class="token punctuation">{</span>
        value<span class="token operator">:</span> <span class="token builtin">string</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>考虑属性是否存在类型中</li><li>建造者模式（option 方法类似于建造者模式）</li><li>方法表达式</li></ul></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 第一步写出最简单形式</span>
<span class="token keyword">type</span> <span class="token class-name">Chainable<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    option<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span><span class="token punctuation">,</span> <span class="token constant">V</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>k<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">,</span> v<span class="token operator">:</span> <span class="token constant">V</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">,</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 第二部考虑 k 是否存在与 T 中</span>
<span class="token keyword">type</span> <span class="token class-name">Chainable<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    option<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span><span class="token punctuation">,</span> <span class="token constant">V</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>k<span class="token operator">:</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">,</span> v<span class="token operator">:</span> <span class="token constant">V</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">,</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 第三步 如果将 K V 对应属性添加到 T 中 这里使用 Omit&lt;T,K&gt;</span>
<span class="token keyword">type</span> <span class="token class-name">Chainable<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    option<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span><span class="token punctuation">,</span> <span class="token constant">V</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>k<span class="token operator">:</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">,</span> v<span class="token operator">:</span> <span class="token constant">V</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Chainable<span class="token operator">&lt;</span>Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span><span class="token constant">K</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 第四步，使用 Record 合并属性</span>
<span class="token keyword">type</span> <span class="token class-name">Chainable<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    option<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span><span class="token punctuation">,</span> <span class="token constant">V</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>k<span class="token operator">:</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">,</span> v<span class="token operator">:</span> <span class="token constant">V</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Chainable<span class="token operator">&lt;</span>Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span><span class="token constant">K</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span>Record<span class="token operator">&lt;</span><span class="token constant">K</span><span class="token punctuation">,</span><span class="token constant">V</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 第一步写出形式</span>
<span class="token keyword">type</span> <span class="token class-name">AppendArgument<span class="token operator">&lt;</span>Fn<span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Fn <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">?</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">:</span><span class="token builtin">never</span>

<span class="token comment">// 第二步使用infer提取参数和返回类型</span>
<span class="token keyword">type</span> <span class="token class-name">AppendArgument<span class="token operator">&lt;</span>Fn<span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Fn <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">T</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">P</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实现为一个接口添加新类型" tabindex="-1"><a class="header-anchor" href="#实现为一个接口添加新类型" aria-hidden="true">#</a> 实现为一个接口添加新类型</h3><p>实现一个为接口添加一个新字段的类型。该类型接收三个参数，返回带有新字段的接口类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Test</span> <span class="token operator">=</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&#39;1&#39;</span> <span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">Result</span> <span class="token operator">=</span> AppendToObject<span class="token operator">&lt;</span>Test<span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span> <span class="token comment">// expected to be { id: &#39;1&#39;, value: 4 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">构造一个K，V给对象，参考Record实现</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">AppendToObject<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">V</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token constant">U</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token operator">?</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token constant">V</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实现-diff" tabindex="-1"><a class="header-anchor" href="#实现-diff" aria-hidden="true">#</a> 🍵 实现 Diff</h3><p>获取两个接口类型中的差值属性。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Foo</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">Bar</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  c<span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Result1</span> <span class="token operator">=</span> Diff<span class="token operator">&lt;</span>Foo<span class="token punctuation">,</span>Bar<span class="token operator">&gt;</span> <span class="token comment">// { b: number, c: boolean }</span>
<span class="token keyword">type</span> <span class="token class-name">Result2</span> <span class="token operator">=</span> Diff<span class="token operator">&lt;</span>Bar<span class="token punctuation">,</span>Foo<span class="token operator">&gt;</span> <span class="token comment">// { b: number, c: boolean }</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//</span>
<span class="token comment">//  解法一、我自己解法 太复杂了😴</span>
<span class="token comment">// [key in K | J as key extends K &amp; J ? never : key]</span>
<span class="token comment">// key 属于并集 单不属于 交集</span>
<span class="token keyword">type</span> <span class="token class-name">Diff<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">J</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">U</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token constant">K</span> <span class="token operator">|</span> <span class="token constant">J</span> <span class="token keyword">as</span> key <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">K</span></span> <span class="token operator">&amp;</span> <span class="token constant">J</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> key<span class="token punctuation">]</span><span class="token operator">:</span>
  key <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">K</span></span> <span class="token operator">?</span> key <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">J</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token operator">:</span> <span class="token punctuation">(</span>key <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">J</span></span> <span class="token operator">?</span> <span class="token punctuation">(</span>key <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">K</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 解法二</span>
<span class="token comment">// [key in keyof (U &amp; T) as key extends keyof (T | U) ? never : key]</span>
<span class="token comment">// key 属于 T U的并集 单不属于交集</span>
<span class="token keyword">type</span> <span class="token class-name">Diff<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token punctuation">(</span><span class="token constant">U</span> <span class="token operator">&amp;</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token keyword">as</span> key <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token punctuation">(</span><span class="token constant">T</span> <span class="token operator">|</span> <span class="token constant">U</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> key<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token constant">U</span> <span class="token operator">&amp;</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment">// 解法三，使用 Omit</span>
<span class="token comment">// 注意了解 Omit 的用法，</span>
<span class="token keyword">type</span> <span class="token class-name">Diff<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token keyword">keyof</span> <span class="token punctuation">(</span><span class="token constant">U</span> <span class="token operator">|</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>



</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p><strong>拓展</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 如果是对象类型， </span>
<span class="token comment">//    | 表示 交集，&amp; 表示并集</span>
<span class="token comment">// 交集</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token punctuation">(</span>Foo <span class="token operator">|</span> Bar<span class="token punctuation">)</span> <span class="token comment">// type A = &quot;a&quot; </span>
<span class="token comment">// 并集</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token punctuation">(</span>Foo <span class="token operator">&amp;</span> Bar<span class="token punctuation">)</span> <span class="token comment">// type B = &quot;a&quot; | &quot;b&quot; | &quot;c&quot;</span>


<span class="token comment">// 对于联合类型 </span>
<span class="token comment">//  | 表示 并集， &amp; 表示 交集</span>
<span class="token comment">// 并集</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">keyof</span> Foo<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token keyword">keyof</span> Bar<span class="token punctuation">)</span> <span class="token comment">// type C = &quot;a&quot; | &quot;b&quot; | &quot;c&quot;</span>
<span class="token comment">// 交集</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">D</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">keyof</span> Foo<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token keyword">keyof</span> Bar<span class="token punctuation">)</span> <span class="token comment">// type D = &quot;a&quot; </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现属性替换" tabindex="-1"><a class="header-anchor" href="#实现属性替换" aria-hidden="true">#</a> 🚀 实现属性替换</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">NodeA</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;A&#39;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  flag<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">NodeB</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;B&#39;</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span>
  flag<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">NodeC</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;C&#39;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  flag<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>


<span class="token keyword">type</span> <span class="token class-name">Nodes</span> <span class="token operator">=</span> NodeA <span class="token operator">|</span> NodeB <span class="token operator">|</span> NodeC

<span class="token comment">// {type: &#39;A&#39;, name: number, flag: string} </span>
<span class="token comment">// |{type: &#39;B&#39;, id: number, flag: string} </span>
<span class="token comment">// | {type: &#39;C&#39;, name: number, flag: string} </span>
<span class="token keyword">type</span> <span class="token class-name">ReplacedNodes</span> <span class="token operator">=</span> ReplaceKeys<span class="token operator">&lt;</span>Nodes<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;flag&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> flag<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span>

<span class="token comment">// </span>
<span class="token comment">// {type: &#39;A&#39;, name: never, flag: number} </span>
<span class="token comment">// | NodeB </span>
<span class="token comment">// | {type: &#39;C&#39;, name: never, flag: number} // would replace name to never</span>
<span class="token keyword">type</span> <span class="token class-name">ReplacedNotExistKeys</span> <span class="token operator">=</span> ReplaceKeys<span class="token operator">&lt;</span>Nodes<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> aa<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 我的解法</span>
<span class="token keyword">type</span> <span class="token class-name">ReplaceKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">S</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">?</span>
  <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> key <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token punctuation">(</span>
      key <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">S</span> <span class="token operator">?</span> <span class="token constant">S</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token builtin">never</span>
    <span class="token punctuation">)</span> <span class="token operator">:</span> key <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">S</span> <span class="token operator">?</span> <span class="token constant">S</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token operator">:</span> <span class="token builtin">never</span>


<span class="token comment">// 参考答案</span>
<span class="token keyword">type</span> <span class="token class-name">ReplaceKeys<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">Y</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span>
  <span class="token operator">?</span> <span class="token punctuation">{</span>
      <span class="token punctuation">[</span><span class="token constant">I</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">U</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">I</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token constant">I</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">Y</span> <span class="token operator">?</span> <span class="token constant">Y</span><span class="token punctuation">[</span><span class="token constant">I</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">[</span><span class="token constant">I</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>

<span class="token comment">// 参考答案</span>
<span class="token keyword">type</span> <span class="token class-name">ReplaceKeys<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">Y</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">U</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">Y</span> <span class="token operator">?</span> <span class="token constant">Y</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实现移除索引签名" tabindex="-1"><a class="header-anchor" href="#实现移除索引签名" aria-hidden="true">#</a> 🏁 实现移除索引签名</h3>`,38),M={href:"https://www.typescriptlang.org/docs/handbook/2/objects.html#index-signatures",target:"_blank",rel:"noopener noreferrer"},S=o(`<blockquote><p>Only some types are allowed for index signature properties: <code>string</code>, <code>number</code>, <code>symbol</code>, template string patterns, and union types consisting only of these.</p></blockquote><blockquote><p>索引签名属性只允许使用某些类型：字符串、数字、符号、模板字符串模式以及仅由这些类型组成的并集类型。</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Foo</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> RemoveIndexSignature<span class="token operator">&lt;</span>Foo<span class="token operator">&gt;</span>  <span class="token comment">// expected { foo(): void }</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">**ts**自带索引签名类型的联合类型**PropertyKey**</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">S</span></span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span> <span class="token operator">|</span> <span class="token builtin">number</span>
<span class="token keyword">type</span> <span class="token class-name">RemoveIndexSignature<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">P</span> <span class="token operator">=</span> <span class="token constant">S</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token class-name">key</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> key <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">P</span></span><span class="token operator">?</span> key <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实现-entries" tabindex="-1"><a class="header-anchor" href="#实现-entries" aria-hidden="true">#</a> 🤔 实现 Entries</h3><p>从T中，选择一组类型不可分配给U的属性。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  locations<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">modelEntries</span> <span class="token operator">=</span> ObjectEntries<span class="token operator">&lt;</span>Model<span class="token operator">&gt;</span> <span class="token comment">// [&#39;name&#39;, string] | [&#39;age&#39;, number] | [&#39;locations&#39;, string[] | null];</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ObjectEntries<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">unknown</span></span> 
  <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">U</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token keyword">infer</span> <span class="token constant">F</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> 
    <span class="token operator">?</span> <span class="token constant">F</span>
    <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">U</span><span class="token punctuation">]</span>
  <span class="token punctuation">]</span> 
<span class="token operator">:</span> <span class="token builtin">never</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实现-元组递归转换成对象" tabindex="-1"><a class="header-anchor" href="#实现-元组递归转换成对象" aria-hidden="true">#</a> 🤔 实现 元组递归转换成对象</h3><p>从T中，选择一组类型不可分配给U的属性。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 元组转换成对象</span>
<span class="token keyword">type</span> <span class="token class-name">a</span> <span class="token operator">=</span> TupleToNestedObject<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token comment">// {a: string}</span>
<span class="token keyword">type</span> <span class="token class-name">b</span> <span class="token operator">=</span> TupleToNestedObject<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token comment">// {a: {b: number}}</span>
<span class="token keyword">type</span> <span class="token class-name">c</span> <span class="token operator">=</span> TupleToNestedObject<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token comment">// boolean. if the tuple is empty, just return the U type</span>
<span class="token class-name"><span class="token keyword">type</span></span> d <span class="token operator">=</span> TupleToNestedObject<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token comment">// {a: {b: {c:number}}}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">TupleToNestedObject<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token constant">L</span> <span class="token operator">&amp;</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> TupleToNestedObject<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span>
  <span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token constant">U</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实现-将元组转换成枚举" tabindex="-1"><a class="header-anchor" href="#实现-将元组转换成枚举" aria-hidden="true">#</a> 🤔 实现 将元组转换成枚举</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;macOS&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Windows&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Linux&quot;</span><span class="token punctuation">]</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A1</span></span> <span class="token operator">=</span> Enum<span class="token operator">&lt;</span>Arr<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token operator">&gt;</span>
<span class="token comment">// expect</span>
<span class="token comment">// type A1 = {</span>
<span class="token comment">//   readonly macOS: &quot;macOS&quot;;</span>
<span class="token comment">//   readonly Windows: &quot;Windows&quot;;</span>
<span class="token comment">//   readonly Linux: &quot;Linux&quot;;</span>
<span class="token comment">// }</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A2</span></span> <span class="token operator">=</span> Enum<span class="token operator">&lt;</span>Arr<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token operator">&gt;</span>
<span class="token comment">// expect</span>
<span class="token comment">// type A2 = {</span>
<span class="token comment">//   readonly macOS: 0;</span>
<span class="token comment">//   readonly Windows: 1;</span>
<span class="token comment">//   readonly Linux: 2;</span>
<span class="token comment">// }</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">数组转换成对象 遍历方式</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">UseIndex<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token constant">L</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">U</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span>
  <span class="token operator">:</span> UseIndex<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span>

<span class="token keyword">type</span> <span class="token class-name">Enum<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">+</span><span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> UseIndex<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">K</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,17),C={href:"https://github.com/type-challenges/type-challenges/issues/27568",target:"_blank",rel:"noopener noreferrer"},N=o(`<h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><h3 id="实现-omit" tabindex="-1"><a class="header-anchor" href="#实现-omit" aria-hidden="true">#</a> 实现 Omit</h3><p>不使用 Omit 实现 TypeScript 的 Omit&lt;T, K&gt; 泛型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
    title<span class="token operator">:</span> <span class="token builtin">string</span>
    description<span class="token operator">:</span> <span class="token builtin">string</span>
    completed<span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">TodoPreview</span> <span class="token operator">=</span> MyOmit<span class="token operator">&lt;</span>Todo<span class="token punctuation">,</span> <span class="token string">&#39;description&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;title&#39;</span><span class="token operator">&gt;</span>

<span class="token keyword">const</span> todo<span class="token operator">:</span> TodoPreview <span class="token operator">=</span> <span class="token punctuation">{</span>
    completed<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>keyof</li><li>in</li><li>extends</li><li>never</li></ul></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyOmit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">K</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实现元组转换成联合类型" tabindex="-1"><a class="header-anchor" href="#实现元组转换成联合类型" aria-hidden="true">#</a> 实现元组转换成联合类型</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;javascript&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;typescript&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;springboot&quot;</span><span class="token punctuation">]</span>

<span class="token keyword">type</span> <span class="token class-name">Test</span> <span class="token operator">=</span> TupleToUnion<span class="token operator">&lt;</span>Arr<span class="token operator">&gt;</span> <span class="token comment">// expected to be &#39;1&#39; | &#39;2&#39; | &#39;3&#39;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>递归</li><li>infer</li></ul></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
<span class="token comment">// 解法一，自己做的</span>
<span class="token keyword">type</span> <span class="token class-name">TupleToUnion<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">F</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">F</span> <span class="token operator">|</span> TupleToUnion<span class="token operator">&lt;</span><span class="token constant">L</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token builtin">never</span>

<span class="token comment">// 解法二 ，说实话，根本看不懂！</span>
<span class="token comment">// 原答案链接 https://github.com/type-challenges/type-challenges/issues/284</span>
<span class="token keyword">type</span> <span class="token class-name">TupleToUnion<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实现-absolute" tabindex="-1"><a class="header-anchor" href="#实现-absolute" aria-hidden="true">#</a> 实现 Absolute</h3><p>实现一个接收string,number或bigInt类型参数的Absolute类型,返回一个正数字符串</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Test</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Result</span> <span class="token operator">=</span> Absolute<span class="token operator">&lt;</span>Test<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// expected to be &quot;100&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">用字符串和infer处理</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Absolute<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> bigint<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">T</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">T</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h3 id="实现-anyof" tabindex="-1"><a class="header-anchor" href="#实现-anyof" aria-hidden="true">#</a> ❓ 实现 Anyof</h3><p>在类型系统中实现类似于 Python 中 any 函数。类型接收一个数组，如果数组中任一个元素为真，则返回 true，否则返回 false。如果数组为空，返回 false。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Sample1</span> <span class="token operator">=</span> AnyOf<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// expected to be true.</span>
<span class="token keyword">type</span> <span class="token class-name">Sample2</span> <span class="token operator">=</span> AnyOf<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// expected to be false.</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">对象类型 使用 \`keyof\` 遍历 属性，数组使用 \`[number]\` 遍历属性</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">FALSE</span></span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token string">&#39;&#39;</span> <span class="token operator">|</span> <span class="token boolean">false</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">}</span>


<span class="token keyword">type</span> <span class="token class-name">AnyOf<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">FALSE</span></span>
  <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p><strong>拓展</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">a1</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;a&#39;</span> <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// false</span>
<span class="token keyword">type</span> <span class="token class-name">b1</span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;a&#39;</span> <span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// true</span>
<span class="token keyword">type</span> <span class="token class-name">c1</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// true</span>
<span class="token keyword">type</span> <span class="token class-name">d1</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现-isnever" tabindex="-1"><a class="header-anchor" href="#实现-isnever" aria-hidden="true">#</a> ❌ <s>实现 IsNever</s></h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> IsNever<span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">&gt;</span>  <span class="token comment">// expected to be true</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> IsNever<span class="token operator">&lt;</span><span class="token keyword">undefined</span><span class="token operator">&gt;</span> <span class="token comment">// expected to be false</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> IsNever<span class="token operator">&lt;</span><span class="token keyword">null</span><span class="token operator">&gt;</span> <span class="token comment">// expected to be false</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">D</span></span> <span class="token operator">=</span> IsNever<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// expected to be false</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">E</span></span> <span class="token operator">=</span> IsNever<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token comment">// expected to be false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">IsNever<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">never</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token comment">// 为什么需要括号？       直接 T extends never ? 不行吗</span>

<span class="token comment">// 测试</span>
<span class="token keyword">type</span> <span class="token class-name">Is_Never<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">never</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> Is_Never<span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; 推算结果为 never 而不是 true 显然不符合题意</span>
<span class="token comment">// 具体原因请查看下面链接</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p><strong>知识点</strong></p>`,26),O=s("code",null,"[]",-1),F={href:"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#distributive-conditional-types",target:"_blank",rel:"noopener noreferrer"},$=o(`<h3 id="实现-isunion" tabindex="-1"><a class="header-anchor" href="#实现-isunion" aria-hidden="true">#</a> 🤔 实现 isUnion</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">case1</span> <span class="token operator">=</span> IsUnion<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>  <span class="token comment">// false</span>
<span class="token keyword">type</span> <span class="token class-name">case2</span> <span class="token operator">=</span> IsUnion<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">|</span><span class="token builtin">number</span><span class="token operator">&gt;</span>  <span class="token comment">// true</span>
<span class="token keyword">type</span> <span class="token class-name">case3</span> <span class="token operator">=</span> IsUnion<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token operator">|</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>  <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">重点！</p><p>A extends A 导致A被分发，所以在[B] extends [A] 这里，B 是联合类型，而A 是分发类型，二者如果不等，那么表示A就是联合类型,具体看</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">IsUnion<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token operator">=</span> <span class="token constant">A</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token constant">B</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token constant">A</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h3 id="实现-minusone" tabindex="-1"><a class="header-anchor" href="#实现-minusone" aria-hidden="true">#</a> 🤔 实现 MinusOne</h3><p>给定一个正整数作为类型的参数，要求返回的类型是该数字减 1。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Zero</span> <span class="token operator">=</span> MinusOne<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&gt;</span> <span class="token comment">// 0</span>
<span class="token keyword">type</span> <span class="token class-name">FiftyFour</span> <span class="token operator">=</span> MinusOne<span class="token operator">&lt;</span><span class="token number">55</span><span class="token operator">&gt;</span> <span class="token comment">// 54</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">ts中是无法直接减一的，但是根据题目要求，可以联想数组，数组的长度和最大下标就是差一！</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MinusOne<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
  <span class="token operator">=</span> <span class="token constant">P</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">F</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">F</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token operator">:</span> MinusOne<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">P</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实现-pickbytype" tabindex="-1"><a class="header-anchor" href="#实现-pickbytype" aria-hidden="true">#</a> 实现 PickByType</h3><p>挑选出类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">OnlyBoolean</span> <span class="token operator">=</span> PickByType<span class="token operator">&lt;</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  count<span class="token operator">:</span> <span class="token builtin">number</span>
  isReadonly<span class="token operator">:</span> <span class="token builtin">boolean</span>
  isEnable<span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token comment">// { isReadonly: boolean; isEnable: boolean; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 解法一</span>
<span class="token keyword">type</span> <span class="token class-name">PickByType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">K</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">K</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment">// 解法二 是要 pick 注意 {}[keyof T] 的含义</span>
<span class="token keyword">type</span> <span class="token class-name">PickByType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">K</span> <span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span>


<span class="token comment">// 解法三 和 解法一类似</span>
<span class="token keyword">type</span> <span class="token class-name">PickByType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Object<span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>Key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">[</span>Key<span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> Key <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>Key<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实现-partialbykeys" tabindex="-1"><a class="header-anchor" href="#实现-partialbykeys" aria-hidden="true">#</a> 🍅 实现 PartialByKeys</h3><p>实现一个通用的<code>PartialByKeys&lt;T, K&gt;</code>，它接收两个类型参数<code>T</code>和<code>K</code>。</p><p><code>K</code>指定应设置为可选的<code>T</code>的属性集。当没有提供<code>K</code>时，它就和普通的<code>Partial&lt;T&gt;</code>一样使所有属性都是可选的。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
  address<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">UserPartialName</span> <span class="token operator">=</span> PartialByKeys<span class="token operator">&lt;</span>User<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// { name?:string; age:number; address:string }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">IO</span><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>k <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span>
<span class="token punctuation">}</span>


<span class="token keyword">type</span> <span class="token class-name">PartialByKeys<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>
<span class="token constant">IO</span><span class="token operator">&lt;</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">K</span></span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token operator">&amp;</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">K</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token operator">&gt;</span>


<span class="token comment">// 解法二</span>
<span class="token keyword">type</span> <span class="token class-name">PartialByKeys<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>
  <span class="token constant">IO</span><span class="token operator">&lt;</span>
    <span class="token punctuation">{</span>
      <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> Extract<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token operator">&amp;</span>
    <span class="token punctuation">{</span>
      <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> Exclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token operator">&gt;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>Extract 期望类型</li><li>Exclude 排除类型</li><li>联合类型中<code>&amp;</code> 表示交集, <code>|</code> 表示并集；对象类型中<code>&amp;</code> 表示并集, <code>|</code> 表示交集</li></ul></div><h3 id="实现-omitbytype" tabindex="-1"><a class="header-anchor" href="#实现-omitbytype" aria-hidden="true">#</a> 实现 OmitByType</h3><p>从T中，选择一组类型不可分配给U的属性。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">OmitBoolean</span> <span class="token operator">=</span> OmitByType<span class="token operator">&lt;</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  count<span class="token operator">:</span> <span class="token builtin">number</span>
  isReadonly<span class="token operator">:</span> <span class="token builtin">boolean</span>
  isEnable<span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token comment">// { name: string; count: number }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">OmitByType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="bem-架构" tabindex="-1"><a class="header-anchor" href="#bem-架构" aria-hidden="true">#</a> 📄 Bem 架构</h3><p>块、元素、修饰符方法论（BEM）是CSS中常用的类命名约定。例如，块组件将表示为btn，依赖于块的元素将表示为btn_price，改变块样式的修饰符将表示为btn-big或btn_price-warning。实现BEM&lt;B，E，M&gt;，根据这三个参数生成字符串并集。其中B是字符串文字，E和M是字符串数组（可以为空）。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token constant">BEM</span><span class="token operator">&lt;</span><span class="token string">&#39;el&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;button&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;primary&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;success&#39;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
<span class="token comment">// &quot;el__button--primary&quot; | &quot;el__button--success&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">IsNever<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">never</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token keyword">type</span> <span class="token class-name">IsUnion<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> IsNever<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token string">&quot;&quot;</span> <span class="token operator">:</span> <span class="token constant">T</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">BEM</span><span class="token operator">&lt;</span><span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">E</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">M</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">B</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>IsUnion<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">__</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">E</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>IsUnion<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">M</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="指定返回的联合类型" tabindex="-1"><a class="header-anchor" href="#指定返回的联合类型" aria-hidden="true">#</a> 🍅 指定返回的联合类型</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> NumberRange<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token operator">&gt;</span> <span class="token comment">//  2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 根据数字生成数组</span>
<span class="token keyword">type</span> <span class="token class-name">AppendArray<span class="token operator">&lt;</span><span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">R</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> AppendArray<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>

<span class="token comment">// 数值加一</span>
<span class="token keyword">type</span> <span class="token class-name">AddLength<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token comment">// 去掉指定前面个数</span>
<span class="token keyword">type</span> <span class="token class-name">Shfit<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">N</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>
 <span class="token constant">U</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">N</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span> <span class="token operator">?</span> Shfit<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">N</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">T</span>

<span class="token comment">// 数组转换联合类型</span>
<span class="token keyword">type</span> <span class="token class-name">ArrayToUnion<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span>

<span class="token comment">// result</span>
<span class="token keyword">type</span> <span class="token class-name">NumberRange<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> ArrayToUnion<span class="token operator">&lt;</span>Shfit<span class="token operator">&lt;</span>AddLength<span class="token operator">&lt;</span>AppendArray<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p><s>// 未完待续……</s></p><h1 id="三-、困难" tabindex="-1"><a class="header-anchor" href="#三-、困难" aria-hidden="true">#</a> 三 、困难</h1><h2 id="其他-1" tabindex="-1"><a class="header-anchor" href="#其他-1" aria-hidden="true">#</a> 其他</h2><h3 id="实现柯里化" tabindex="-1"><a class="header-anchor" href="#实现柯里化" aria-hidden="true">#</a> 🍅 实现柯里化</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b
<span class="token keyword">const</span> three <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> curriedAdd <span class="token operator">=</span> <span class="token function">Currying</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span>
<span class="token keyword">const</span> five <span class="token operator">=</span> <span class="token function">curriedAdd</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">柯理华本质是看函数有几个参数，多少个参数返回多少个函数，使用递归</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">Currying</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">F</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>fn<span class="token operator">:</span> <span class="token constant">F</span><span class="token punctuation">)</span><span class="token operator">:</span> Curried<span class="token operator">&lt;</span><span class="token constant">F</span><span class="token operator">&gt;</span>

<span class="token comment">// 原函数返回</span>
<span class="token keyword">type</span> <span class="token class-name">Curried<span class="token operator">&lt;</span><span class="token constant">F</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">F</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> Args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span>
  <span class="token punctuation">(</span><span class="token operator">...</span>arg<span class="token operator">:</span> Args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">R</span> 
  <span class="token operator">:</span> <span class="token builtin">never</span>


 <span class="token comment">// 判断函数参数个数，使用递归 【答案】</span>
<span class="token keyword">type</span> <span class="token class-name">Curried<span class="token operator">&lt;</span><span class="token constant">F</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">F</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> Args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span>
  Args <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Other<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">(</span>arg<span class="token operator">:</span> First<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Curried<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> Other<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">R</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">R</span>
  <span class="token operator">:</span> <span class="token builtin">never</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实现-getrequired" tabindex="-1"><a class="header-anchor" href="#实现-getrequired" aria-hidden="true">#</a> 🍅 实现 GetRequired</h3><p>实现高级util类型<code>GetRequired&lt;T&gt;</code>，该类型保留所有必填字段</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">I</span></span> <span class="token operator">=</span> GetRequired<span class="token operator">&lt;</span><span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> bar<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token comment">// expected to be { foo: number }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
<span class="token comment">// 解法一</span>
<span class="token comment">// 使得所有key变成必须选类型</span>
<span class="token keyword">type</span> <span class="token class-name">MyRequried<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>k <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">GetRequired<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">MyRequried<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">?</span> key <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token punctuation">}</span>



<span class="token comment">// 解法二</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,41),I={href:"https://github.com/type-challenges/type-challenges/issues/27555",target:"_blank",rel:"noopener noreferrer"},K=o(`<h3 id="实现-getrequiredkeys" tabindex="-1"><a class="header-anchor" href="#实现-getrequiredkeys" aria-hidden="true">#</a> 🍅 实现 GetRequiredkeys</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Result</span> <span class="token operator">=</span> RequiredKeys<span class="token operator">&lt;</span><span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> bar<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// expected to be “foo”</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">和上面解法类似，对象类型转换成联合类型</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyRequried<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">GetRequired<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">MyRequried<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">?</span> key <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">]</span><span class="token operator">:</span> key
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">RequiredKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> GetRequired<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> GetRequired<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,4),E={href:"https://github.com/type-challenges/type-challenges/issues/27556",target:"_blank",rel:"noopener noreferrer"},D=o(`<p><strong>拓展</strong></p><ul><li>Array类型转换成联合类型</li></ul><h3 id="实现-getoptional" tabindex="-1"><a class="header-anchor" href="#实现-getoptional" aria-hidden="true">#</a> 🍅 实现 GetOptional</h3><p>保留可选类型的key，转换成联合类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">I</span></span> <span class="token operator">=</span> GetOptional<span class="token operator">&lt;</span><span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> bar<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token comment">// expected to be { bar?: string }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">和上面解法类似，只不过改变了一下判断依据</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyRequired<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token punctuation">}</span>


<span class="token keyword">type</span> <span class="token class-name">GetOptional<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">MyRequired<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> key<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,7),P={href:"https://github.com/type-challenges/type-challenges/issues/27557",target:"_blank",rel:"noopener noreferrer"},G=o(`<h3 id="实现-getoptionalkeys" tabindex="-1"><a class="header-anchor" href="#实现-getoptionalkeys" aria-hidden="true">#</a> 🍅 实现 GetOptionalKeys</h3><p>保留可选类型的key，转换成联合类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">I</span></span> <span class="token operator">=</span> GetOptional<span class="token operator">&lt;</span><span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> bar<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token comment">// expected to be &quot;bar&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>

<span class="token keyword">type</span> <span class="token class-name">MyRequired<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token punctuation">}</span>


<span class="token keyword">type</span> <span class="token class-name">GetOptional<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">MyRequired<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> key<span class="token punctuation">]</span><span class="token operator">:</span> key
<span class="token punctuation">}</span>

<span class="token comment">// 将得到的可选类型转换成必须类型，去除 undefined </span>
<span class="token keyword">type</span> <span class="token class-name">OptionalKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> MyRequired<span class="token operator">&lt;</span>GetOptional<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> MyRequired<span class="token operator">&lt;</span>GetOptional<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,4),W={href:"https://github.com/type-challenges/type-challenges/issues/27560",target:"_blank",rel:"noopener noreferrer"},z=o(`<h3 id="实现-promiseall" tabindex="-1"><a class="header-anchor" href="#实现-promiseall" aria-hidden="true">#</a> ❌ 实现 PromiseAll</h3><p>// ....</p><h3 id="实现-jsonp" tabindex="-1"><a class="header-anchor" href="#实现-jsonp" aria-hidden="true">#</a> ❌ 实现 JSONP</h3><p>// ...</p><h3 id="实现-simplevue" tabindex="-1"><a class="header-anchor" href="#实现-simplevue" aria-hidden="true">#</a> 🍅 实现 SimpleVue</h3><p>实现类似Vue的类型支持的简化版本。</p><p>通过提供一个函数<code>SimpleVue</code>（类似于<code>Vue.extend</code>或<code>defineComponent</code>），它应该正确地推断出 computed 和 methods 内部的<code>this</code>类型。</p><p>在此挑战中，我们假设<code>SimpleVue</code>接受只带有<code>data</code>，<code>computed</code>和<code>methods</code>字段的Object作为其唯一的参数，</p><ul><li><code>data</code>是一个简单的函数，它返回一个提供上下文<code>this</code>的对象，但是你无法在<code>data</code>中获取其他的计算属性或方法。</li><li><code>computed</code>是将<code>this</code>作为上下文的函数的对象，进行一些计算并返回结果。在上下文中应暴露计算出的值而不是函数。</li><li><code>methods</code>是函数的对象，其上下文也为<code>this</code>。函数中可以访问<code>data</code>，<code>computed</code>以及其他<code>methods</code>中的暴露的字段。 <code>computed</code>与<code>methods</code>的不同之处在于<code>methods</code>在上下文中按原样暴露为函数。</li></ul><p><code>SimpleVue</code>的返回值类型可以是任意的。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token function">SimpleVue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      firstname<span class="token operator">:</span> <span class="token string">&#39;Type&#39;</span><span class="token punctuation">,</span>
      lastname<span class="token operator">:</span> <span class="token string">&#39;Challenges&#39;</span><span class="token punctuation">,</span>
      amount<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  computed<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">fullname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstname <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastname
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  methods<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fullname<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">GetComputed<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token class-name">Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> 
  <span class="token operator">?</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">S</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">C</span><span class="token punctuation">]</span><span class="token operator">:</span> ReturnType<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token punctuation">[</span><span class="token constant">S</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">}</span> 
  <span class="token operator">:</span> <span class="token builtin">never</span>

<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">SimpleVue</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">D</span><span class="token punctuation">,</span> <span class="token constant">C</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  options<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">D</span><span class="token punctuation">,</span>
    computed<span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">,</span>
    methods<span class="token operator">:</span> <span class="token constant">M</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span> <span class="token operator">&amp;</span> ThisType<span class="token operator">&lt;</span><span class="token constant">D</span> <span class="token operator">&amp;</span> <span class="token constant">M</span> <span class="token operator">&amp;</span> GetComputed<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;&gt;</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实现将字符串转换成数字" tabindex="-1"><a class="header-anchor" href="#实现将字符串转换成数字" aria-hidden="true">#</a> 🍵 实现将字符串转换成数字</h3><details class="custom-container details"><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ToNumber<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">N</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> <span class="token constant">N</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h3 id="实现两数之和" tabindex="-1"><a class="header-anchor" href="#实现两数之和" aria-hidden="true">#</a> 🤔 实现两数之和</h3><p>给定一个整数数组 nums 和一个目标整数 target, 如果 nums 数组中存在两个元素的和等于 target 返回 true, 否则返回 false</p><div class="custom-container tip"><p class="custom-container-title">理清思路，排序，左右指针</p><details class="custom-container details"><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 方法一使用函数实现 </span>
<span class="token keyword">function</span> <span class="token function">TowSum</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span>
  <span class="token keyword">let</span> sum<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      right<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      left<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>


<span class="token comment">// 方法二使用类型实现</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details></div>`,17),V={href:"https://github.com/type-challenges/type-challenges/issues/27374",target:"_blank",rel:"noopener noreferrer"},j=o('<h3 id="实现日期验证" tabindex="-1"><a class="header-anchor" href="#实现日期验证" aria-hidden="true">#</a> 😋 实现日期验证</h3><p>要求实现一个类型验证月份和日期</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>ValidDate<span class="token operator">&lt;</span><span class="token string">&#39;0102&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// true</span>\nValidDate<span class="token operator">&lt;</span><span class="token string">&#39;0131&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// true</span>\nValidDate<span class="token operator">&lt;</span><span class="token string">&#39;1231&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// true</span>\nValidDate<span class="token operator">&lt;</span><span class="token string">&#39;0229&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// false</span>\nValidDate<span class="token operator">&lt;</span><span class="token string">&#39;0100&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// false</span>\nValidDate<span class="token operator">&lt;</span><span class="token string">&#39;0132&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// false</span>\nValidDate<span class="token operator">&lt;</span><span class="token string">&#39;1301&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">本题可以采用枚举实现,知道哪些月份是月大，哪些是月小，以及二月份是一个特殊月份！</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 数字的范围</span>\n<span class="token keyword">type</span> <span class="token class-name">Num</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">5</span> <span class="token operator">|</span> <span class="token number">6</span> <span class="token operator">|</span> <span class="token number">7</span> <span class="token operator">|</span> <span class="token number">8</span> <span class="token operator">|</span> <span class="token number">9</span>\n\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">D</span></span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span>\n<span class="token comment">// 月小</span>\n<span class="token keyword">type</span> <span class="token class-name">MinMM</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">0</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token number">4</span> <span class="token operator">|</span> <span class="token number">6</span> <span class="token operator">|</span> <span class="token number">7</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">11</span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// 月大</span>\n<span class="token keyword">type</span> <span class="token class-name">MaxMM</span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">0</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Num<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">1</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">D</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> MinMM <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">02</span><span class="token template-punctuation string">`</span></span><span class="token operator">&gt;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Day</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">D</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Num<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">3</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Exclude<span class="token operator">&lt;</span><span class="token constant">D</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n\n<span class="token keyword">type</span> <span class="token class-name">ValidDate<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>MaxMM<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Day<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>MinMM<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Exclude<span class="token operator">&lt;</span>Day<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">31</span><span class="token template-punctuation string">`</span></span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">02</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Exclude<span class="token operator">&lt;</span>Day<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">29</span><span class="token template-punctuation string">`</span></span> <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">30</span><span class="token template-punctuation string">`</span></span> <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">31</span><span class="token template-punctuation string">`</span></span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span>\n\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>',5),H={href:"https://github.com/type-challenges/type-challenges/issues/27378",target:"_blank",rel:"noopener noreferrer"},Y=o(`<h3 id="实现-get" tabindex="-1"><a class="header-anchor" href="#实现-get" aria-hidden="true">#</a> 🍰 实现 Get</h3><p>实现一个Get类型，获取对象属性</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Data</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  foo<span class="token operator">:</span> <span class="token punctuation">{</span>
    bar<span class="token operator">:</span> <span class="token punctuation">{</span>
      value<span class="token operator">:</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">,</span>
      count<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    included<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  hello<span class="token operator">:</span> <span class="token string">&#39;world&#39;</span>
<span class="token punctuation">}</span>
  
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> Get<span class="token operator">&lt;</span>Data<span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;world&#39;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> Get<span class="token operator">&lt;</span>Data<span class="token punctuation">,</span> <span class="token string">&#39;foo.bar.count&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// 6</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> Get<span class="token operator">&lt;</span>Data<span class="token punctuation">,</span> <span class="token string">&#39;foo.bar&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// { value: &#39;foobar&#39;, count: 6 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">判断 属性中是否含有\`.\`是切入点</p></div><details class="custom-container details"><summary>点击查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Get<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> <span class="token constant">L</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token operator">?</span> Get<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">L</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token operator">?</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token builtin">never</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details>`,5),J={href:"https://github.com/type-challenges/type-challenges/issues/27567",target:"_blank",rel:"noopener noreferrer"},X=o(`<h3 id="实现-maxnum" tabindex="-1"><a class="header-anchor" href="#实现-maxnum" aria-hidden="true">#</a> 🍅 实现 MaxNum</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
<span class="token comment">// 设置一个默认值为0</span>
<span class="token comment">// 当 C[&#39;length&#39;] === A | B 时退出递归</span>
<span class="token comment">// 判断 C[&#39;length&#39;] === A or  C[&#39;length&#39;] === B 先 === 的为较小值</span>
<span class="token comment">// 不过这种方式当 A B 值为 负数时 该方案错误！</span>
<span class="token comment">// 因此分为四种情况</span>
<span class="token comment">// 1 A&gt;= 0 B&gt;=0     ===========&gt; 比较 length ,谁的 length 大 返回谁</span>
<span class="token comment">// 2 A&gt;0 B&lt;0        ===========&gt; 直接返回 A</span>
<span class="token comment">// 3 A&lt;0 B&gt;0        ===========&gt; 直接返回 B</span>
<span class="token comment">// 4 A&lt;0 B&lt;0        ========== &gt; 谁的length小，值越大</span>
<span class="token comment">// isAllNegative 表示两个数是否为负数</span>
<span class="token comment">// A B 表示绝对值</span>
<span class="token comment">// A1 表示 A 对应 如果A 是正数，L 和也是正数 如果 A = 1 ，L = 1 =&gt;1; A = 1，A1 = -1 =&gt; -1</span>
<span class="token comment">// B1 同 A1与 A 对应关系</span>
<span class="token keyword">type</span> <span class="token class-name">Compare<span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span> isAllNegative <span class="token keyword">extends</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token constant">A1</span> <span class="token keyword">extends</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B1</span> <span class="token keyword">extends</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>
  <span class="token constant">C</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">|</span> <span class="token constant">B</span> <span class="token operator">?</span>
  <span class="token constant">C</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">?</span> isAllNegative <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token constant">A1</span> <span class="token operator">:</span> <span class="token constant">B1</span> <span class="token operator">:</span> isAllNegative <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token constant">B1</span> <span class="token operator">:</span> <span class="token constant">A1</span>
  <span class="token operator">:</span> Compare<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">,</span> isAllNegative<span class="token punctuation">,</span> <span class="token constant">A1</span><span class="token punctuation">,</span> <span class="token constant">B1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">C</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>


<span class="token comment">// 辅助类型</span>
<span class="token comment">// 判断是否是负数</span>
<span class="token keyword">type</span> <span class="token class-name">IsNegative<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">T</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span>

<span class="token comment">// 获取绝对值</span>
<span class="token keyword">type</span> <span class="token class-name">GetNegative<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">T</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> <span class="token constant">A</span> <span class="token operator">:</span> <span class="token constant">T</span>


<span class="token comment">// 两个负数数字越小值越大！</span>
<span class="token comment">// 如果是一个正数和一个负数 就没必要对比了直接返回正数</span>
<span class="token keyword">type</span> <span class="token class-name">Max<span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>
  IsNegative<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span>
  <span class="token operator">?</span> IsNegative<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span>
  <span class="token comment">// A &lt; 0 , B &lt; 0</span>
  <span class="token operator">?</span> Compare<span class="token operator">&lt;</span>GetNegative<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> GetNegative<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">B</span>
  <span class="token operator">:</span> IsNegative<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token constant">A</span> <span class="token operator">:</span> Compare<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token operator">&gt;</span>




<span class="token keyword">type</span> <span class="token class-name">Maximum<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">M</span> <span class="token keyword">extends</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> First <span class="token keyword">extends</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>
  <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span>
    First <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">M</span>
  <span class="token punctuation">)</span> <span class="token operator">:</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">?</span>
  Maximum<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token punctuation">,</span> Max<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">M</span>




<span class="token comment">// test</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A1</span></span> <span class="token operator">=</span> Max<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&gt;</span> <span class="token comment">// 10</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A2</span></span> <span class="token operator">=</span> Max<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">&gt;</span> <span class="token comment">// 10</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B1</span></span> <span class="token operator">=</span> Max<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">&gt;</span> <span class="token comment">// 1</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B2</span></span> <span class="token operator">=</span> Max<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;</span> <span class="token comment">// 0</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C1</span></span> <span class="token operator">=</span> Max<span class="token operator">&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">&gt;</span> <span class="token comment">// 1</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C2</span></span> <span class="token operator">=</span> Max<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;</span> <span class="token comment">// 1</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">D1</span></span> <span class="token operator">=</span> Max<span class="token operator">&lt;</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;</span> <span class="token comment">// -1</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">D2</span></span> <span class="token operator">=</span> Max<span class="token operator">&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token operator">&gt;</span> <span class="token comment">// -1</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">E1</span></span> <span class="token operator">=</span> Max<span class="token operator">&lt;</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">200</span><span class="token operator">&gt;</span> <span class="token comment">// -100</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">E2</span></span> <span class="token operator">=</span> Max<span class="token operator">&lt;</span><span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">100</span><span class="token operator">&gt;</span> <span class="token comment">// -100</span>

<span class="token comment">// test</span>
<span class="token keyword">type</span> <span class="token class-name">arr0</span> <span class="token operator">=</span> Maximum<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// never</span>
<span class="token keyword">type</span> <span class="token class-name">arr1</span> <span class="token operator">=</span> Maximum<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">150</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// 20</span>
<span class="token keyword">type</span> <span class="token class-name">arr2</span> <span class="token operator">=</span> Maximum<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">150</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// -1</span>
<span class="token keyword">type</span> <span class="token class-name">arr3</span> <span class="token operator">=</span> Maximum<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">150</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// 200</span>
<span class="token keyword">type</span> <span class="token class-name">arr4</span> <span class="token operator">=</span> Maximum<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// 0</span>
<span class="token keyword">type</span> <span class="token class-name">arr5</span> <span class="token operator">=</span> Maximum<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// 1</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>本题是我多考虑了，官方没要求负数情况</strong></p><blockquote><p>关于本题优化方案方案 转换成字符串比较</p></blockquote><p>不过我可以拓展成要求负数情况</p><p><strong>优化后结果</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
<span class="token comment">// 辅助类型</span>
<span class="token keyword">type</span> <span class="token class-name">NumToString<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">T</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token comment">// 获取字符串长度</span>
<span class="token keyword">type</span> <span class="token class-name">GetStringLen<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> GetStringLen<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">L</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span>
<span class="token comment">// 返回较小数字</span>
<span class="token keyword">type</span> <span class="token class-name">GetMinNumber<span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token constant">L</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">L</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">|</span> <span class="token constant">B</span> <span class="token operator">?</span> <span class="token constant">L</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">?</span> <span class="token constant">A</span> <span class="token operator">:</span> <span class="token constant">B</span> <span class="token operator">:</span> GetMinNumber<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
<span class="token comment">// number is equal</span>
<span class="token keyword">type</span> <span class="token class-name">NumIsEqual<span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token comment">// strlen is equal</span>
<span class="token keyword">type</span> <span class="token class-name">StrLenIsEqual<span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> GetStringLen<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name">GetStringLen<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token comment">// 返回较大值 A B 属于 0-9 A1 B1 为原始值</span>
<span class="token keyword">type</span> <span class="token class-name">GetMaxNumber<span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token constant">A1</span> <span class="token keyword">extends</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B1</span> <span class="token keyword">extends</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token constant">B</span><span class="token punctuation">,</span> isAllNegative <span class="token keyword">extends</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token operator">&gt;</span></span>
  <span class="token operator">=</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name">GetMinNumber<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> isAllNegative <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token constant">A1</span> <span class="token operator">:</span> <span class="token constant">B1</span> <span class="token operator">:</span> isAllNegative <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token constant">B1</span> <span class="token operator">:</span> <span class="token constant">A1</span>

<span class="token comment">// 判断是否是负数</span>
<span class="token keyword">type</span> <span class="token class-name">IsNegative<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">T</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span>

<span class="token comment">// 获取绝对值</span>
<span class="token keyword">type</span> <span class="token class-name">GetNegative<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">T</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> <span class="token constant">A</span> <span class="token operator">:</span> <span class="token constant">T</span>



<span class="token keyword">type</span> <span class="token class-name">Compare<span class="token operator">&lt;</span>
  <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  <span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  isAllNegative <span class="token keyword">extends</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token constant">A1</span> <span class="token keyword">extends</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">,</span>
  <span class="token constant">B1</span> <span class="token keyword">extends</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token constant">B</span><span class="token punctuation">,</span>
  <span class="token constant">S1</span> <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">=</span> NumToString<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token constant">S2</span> <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">=</span> NumToString<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">&gt;</span>
<span class="token operator">&gt;</span></span> <span class="token operator">=</span>
  StrLenIsEqual<span class="token operator">&lt;</span><span class="token constant">S1</span><span class="token punctuation">,</span> <span class="token constant">S2</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span>
  <span class="token punctuation">(</span>
    <span class="token constant">S1</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">L1</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> 
    <span class="token operator">?</span> <span class="token constant">S2</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">L2</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token comment">// 比较单个字符串对应数字情况</span>
    <span class="token operator">?</span> NumIsEqual<span class="token operator">&lt;</span><span class="token constant">L1</span><span class="token punctuation">,</span> <span class="token constant">L2</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span>
    <span class="token comment">// 相等递归下一次</span>
    Compare<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">,</span> isAllNegative<span class="token punctuation">,</span> <span class="token constant">A1</span><span class="token punctuation">,</span> <span class="token constant">B1</span><span class="token punctuation">,</span> <span class="token constant">R1</span><span class="token punctuation">,</span> <span class="token constant">R2</span><span class="token operator">&gt;</span> <span class="token operator">:</span>
    <span class="token comment">// 不相等话比较数字大小</span>
    GetMaxNumber<span class="token operator">&lt;</span><span class="token constant">L1</span><span class="token punctuation">,</span> <span class="token constant">L2</span><span class="token punctuation">,</span> <span class="token constant">A1</span><span class="token punctuation">,</span> <span class="token constant">B1</span><span class="token punctuation">,</span> isAllNegative<span class="token operator">&gt;</span>
    <span class="token comment">// 对比到此处说明 A1 === B1 所以任意返回一个值就行了</span>
    <span class="token operator">:</span> <span class="token constant">A1</span> <span class="token operator">:</span> <span class="token constant">A1</span>
  <span class="token punctuation">)</span> 
  <span class="token operator">:</span> 
  <span class="token punctuation">(</span>
    <span class="token comment">// 转换成字符串后长度不相等</span>
    GetStringLen<span class="token operator">&lt;</span><span class="token constant">S1</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name">GetMinNumber<span class="token operator">&lt;</span>GetStringLen<span class="token operator">&lt;</span><span class="token constant">S1</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> GetStringLen<span class="token operator">&lt;</span><span class="token constant">S2</span><span class="token operator">&gt;&gt;</span></span> <span class="token operator">?</span>
    <span class="token comment">// S1 长度小于 S2</span>
    isAllNegative <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">false</span></span> <span class="token operator">?</span> <span class="token constant">B1</span> <span class="token operator">:</span> <span class="token constant">A1</span> <span class="token operator">:</span>
    <span class="token comment">// S1长度大于 S2</span>
    isAllNegative <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">false</span></span> <span class="token operator">?</span> <span class="token constant">A1</span> <span class="token operator">:</span> <span class="token constant">B1</span>
  <span class="token punctuation">)</span>


  <span class="token comment">// 分为四种情况</span>
<span class="token comment">// 1 A&gt;= 0 B&gt;=0     ===========&gt; 比较 length ,谁的 length 大 返回谁</span>
<span class="token comment">// 2 A&gt;0 B&lt;0        ===========&gt; 直接返回 A</span>
<span class="token comment">// 3 A&lt;0 B&gt;0        ===========&gt; 直接返回 B</span>
<span class="token comment">// 4 A&lt;0 B&lt;0        ========== &gt; 谁的length小，值越大</span>
<span class="token keyword">type</span> <span class="token class-name">Max<span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>
IsNegative<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span>
<span class="token operator">?</span> IsNegative<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span>
<span class="token comment">// A &lt; 0 , B &lt; 0</span>
<span class="token operator">?</span> Compare<span class="token operator">&lt;</span>GetNegative<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> GetNegative<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">B</span>
<span class="token operator">:</span> IsNegative<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token constant">A</span> <span class="token operator">:</span> Compare<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token operator">&gt;</span>



<span class="token comment">// 答案</span>
<span class="token keyword">type</span> <span class="token class-name">Maximum<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">M</span> <span class="token keyword">extends</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> First <span class="token keyword">extends</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>
<span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span>
  First <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">M</span>
<span class="token punctuation">)</span> <span class="token operator">:</span>
<span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">?</span>
Maximum<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token punctuation">,</span> Max<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">M</span>


<span class="token comment">// test</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">N1</span></span> <span class="token operator">=</span> NumToString<span class="token operator">&lt;</span><span class="token number">100</span><span class="token operator">&gt;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">N2</span></span> <span class="token operator">=</span> NumToString<span class="token operator">&lt;</span><span class="token number">20</span><span class="token operator">&gt;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">S1</span></span> <span class="token operator">=</span> GetStringLen<span class="token operator">&lt;</span><span class="token constant">N1</span><span class="token operator">&gt;</span>

<span class="token comment">// test  GetMaxNumber</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">G1</span></span> <span class="token operator">=</span> GetMaxNumber<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token operator">&gt;</span> <span class="token comment">// 200</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">G2</span></span> <span class="token operator">=</span> GetMaxNumber<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token operator">&gt;</span>  <span class="token comment">// 200</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">G3</span></span> <span class="token operator">=</span> GetMaxNumber<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token operator">&gt;</span> <span class="token comment">// -100</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">G4</span></span> <span class="token operator">=</span> GetMaxNumber<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token operator">&gt;</span> <span class="token comment">// -100</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">G5</span></span> <span class="token operator">=</span> GetMaxNumber<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token operator">&gt;</span> <span class="token comment">// 10</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">G6</span></span> <span class="token operator">=</span> GetMaxNumber<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token operator">&gt;</span> <span class="token comment">// </span>


<span class="token comment">//test</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A1</span></span> <span class="token operator">=</span> Max<span class="token operator">&lt;</span><span class="token number">30000000</span><span class="token punctuation">,</span> <span class="token number">20000000</span><span class="token operator">&gt;</span> <span class="token comment">// 30000000</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A2</span></span> <span class="token operator">=</span> Max<span class="token operator">&lt;</span><span class="token number">20000000</span><span class="token punctuation">,</span> <span class="token number">30000000</span><span class="token operator">&gt;</span> <span class="token comment">// 30000000</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B1</span></span> <span class="token operator">=</span> Max<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100000000</span><span class="token operator">&gt;</span> <span class="token comment">// 100000000</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B2</span></span> <span class="token operator">=</span> Max<span class="token operator">&lt;</span><span class="token number">100000000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">&gt;</span> <span class="token comment">// 100000000</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C1</span></span> <span class="token operator">=</span> Max<span class="token operator">&lt;</span><span class="token operator">-</span><span class="token number">10000000000</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20000000000</span><span class="token operator">&gt;</span> <span class="token comment">// -10000000000</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C2</span></span> <span class="token operator">=</span> Max<span class="token operator">&lt;</span><span class="token operator">-</span><span class="token number">20000000000</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10000000000</span><span class="token operator">&gt;</span> <span class="token comment">// -10000000000</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">D1</span></span> <span class="token operator">=</span> Max<span class="token operator">&lt;</span><span class="token operator">-</span><span class="token number">20000000</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10000000000000</span><span class="token operator">&gt;</span> <span class="token comment">// -20000000</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">D2</span></span> <span class="token operator">=</span> Max<span class="token operator">&lt;</span><span class="token operator">-</span><span class="token number">10000000000000</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20000000</span><span class="token operator">&gt;</span> <span class="token comment">// -20000000</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">E1</span></span> <span class="token operator">=</span> Max<span class="token operator">&lt;</span><span class="token operator">-</span><span class="token number">30000000</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">30000000</span><span class="token operator">&gt;</span> <span class="token comment">// -20000000</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">E2</span></span> <span class="token operator">=</span> Max<span class="token operator">&lt;</span><span class="token operator">-</span><span class="token number">30000000</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">30000000</span><span class="token operator">&gt;</span> <span class="token comment">// -20000000</span>

<span class="token comment">// test</span>
<span class="token keyword">type</span> <span class="token class-name">arr0</span> <span class="token operator">=</span> Maximum<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// never</span>
<span class="token keyword">type</span> <span class="token class-name">arr1</span> <span class="token operator">=</span> Maximum<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">100000</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2000000</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2000000</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">150000000</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// -100000</span>
<span class="token keyword">type</span> <span class="token class-name">arr2</span> <span class="token operator">=</span> Maximum<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">200000</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1500000000</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// -10</span>
<span class="token keyword">type</span> <span class="token class-name">arr3</span> <span class="token operator">=</span> Maximum<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">100000000</span><span class="token punctuation">,</span> <span class="token number">20000</span><span class="token punctuation">,</span> <span class="token number">20000</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">150000</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// 100000000</span>
<span class="token keyword">type</span> <span class="token class-name">arr4</span> <span class="token operator">=</span> Maximum<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// 0</span>
<span class="token keyword">type</span> <span class="token class-name">arr5</span> <span class="token operator">=</span> Maximum<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// 1</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结一下</strong></p><ol><li>均为正数 <ul><li>转换成字符串比较，谁的长度大，值就越大</li><li>同长度，将各个字符对应值，从左到右逐一比较，同位置字符对应数字越大，对应值越大，可以退出比较了</li></ul></li><li>一正一负 直接返回正数</li><li>均为负数 <ul><li>转换成字符串,谁的长度小，值就越大</li><li>同长度，将各个字符对应值，从左到右逐一比较，同位置字符对应数字越小，对应值越大，可以退出比较了</li></ul></li></ol><p><strong>为什么需要转换成字符串？</strong></p><p>当数字值越大时，递归深度就越大，出现栈溢出。</p><p><strong>转换成字符串有什么好处？</strong></p><p>只比较长度，不会存在深度递归，同长度情况下，可以从左到右逐一比对，由于比较的是单个数字，这种情况下最大也是9，不会存在深度递归问题</p>`,13),Z={href:"https://github.com/type-challenges/type-challenges/issues/27595",target:"_blank",rel:"noopener noreferrer"},Q=o('<p>// 未完待续……</p><h1 id="四、地狱" tabindex="-1"><a class="header-anchor" href="#四、地狱" aria-hidden="true">#</a> 四、地狱</h1><p>// 未完待续……</p><h1 id="五、总结" tabindex="-1"><a class="header-anchor" href="#五、总结" aria-hidden="true">#</a> 五、总结</h1><p>// 未完待续……</p><h1 id="六、相关链接" tabindex="-1"><a class="header-anchor" href="#六、相关链接" aria-hidden="true">#</a> 六、相关链接</h1>',6),ss={href:"https://github.com/type-challenges/type-challenges/blob/main/README.zh-CN.md",target:"_blank",rel:"noopener noreferrer"},ns={href:"https://blog.maxiaobo.com.cn/",target:"_blank",rel:"noopener noreferrer"};function as(ts,ps){const e=c("ExternalLinkIcon"),t=c("router-link");return i(),r("div",null,[u,s("p",null,[n("训练题目来源 "),s("a",d,[n("ts训练营"),a(e)]),n("，关于标记")]),m,v,s("nav",b,[s("ul",null,[s("li",null,[a(t,{to:"#说在前面"},{default:p(()=>[n("说在前面")]),_:1})]),s("li",null,[a(t,{to:"#混合"},{default:p(()=>[n("混合")]),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#实现元组转换对象"},{default:p(()=>[n("实现元组转换对象")]),_:1})]),s("li",null,[a(t,{to:"#实现-exclude"},{default:p(()=>[n("实现 exclude")]),_:1})]),s("li",null,[a(t,{to:"#实现-include"},{default:p(()=>[n("实现 Include")]),_:1})]),s("li",null,[a(t,{to:"#实现-if"},{default:p(()=>[n("实现 If")]),_:1})])])]),s("li",null,[a(t,{to:"#数组系列"},{default:p(()=>[n("数组系列")]),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#实现-first"},{default:p(()=>[n("实现 First")]),_:1})]),s("li",null,[a(t,{to:"#实现-end"},{default:p(()=>[n("实现 End")]),_:1})]),s("li",null,[a(t,{to:"#实现-unshitf"},{default:p(()=>[n("实现 Unshitf")]),_:1})]),s("li",null,[a(t,{to:"#实现-shitf"},{default:p(()=>[n("实现 Shitf")]),_:1})]),s("li",null,[a(t,{to:"#实现-push"},{default:p(()=>[n("实现 Push")]),_:1})]),s("li",null,[a(t,{to:"#获取-length"},{default:p(()=>[n("获取 Length")]),_:1})]),s("li",null,[a(t,{to:"#实现-concat"},{default:p(()=>[n("实现 concat")]),_:1})]),s("li",null,[a(t,{to:"#实现-reverse"},{default:p(()=>[n("实现 Reverse")]),_:1})]),s("li",null,[a(t,{to:"#实现-lastindexof"},{default:p(()=>[n("📦 实现 LastIndexOf")]),_:1})]),s("li",null,[a(t,{to:"#实现-combination"},{default:p(()=>[n("📦 实现 Combination")]),_:1})]),s("li",null,[a(t,{to:"#实现-filter"},{default:p(()=>[n("📦 实现 Filter")]),_:1})]),s("li",null,[a(t,{to:"#实现-unique"},{default:p(()=>[n("实现 Unique")]),_:1})]),s("li",null,[a(t,{to:"#实现-getmiddleelement"},{default:p(()=>[n("实现 GetMiddleElement")]),_:1})]),s("li",null,[a(t,{to:"#实现-appear-only-once"},{default:p(()=>[n("实现 Appear only once")]),_:1})]),s("li",null,[a(t,{to:"#实现数组扁平化"},{default:p(()=>[n("实现数组扁平化")]),_:1})]),s("li",null,[a(t,{to:"#指定深度扁平化"},{default:p(()=>[n("指定深度扁平化")]),_:1})]),s("li",null,[a(t,{to:"#实现指定删除数组内容"},{default:p(()=>[n("实现指定删除数组内容")]),_:1})]),s("li",null,[a(t,{to:"#实现给定长度的数组"},{default:p(()=>[n("实现给定长度的数组")]),_:1})]),s("li",null,[a(t,{to:"#实现矩阵变换"},{default:p(()=>[n("🍅 实现矩阵变换")]),_:1})])])]),s("li",null,[a(t,{to:"#readonly-系列"},{default:p(()=>[n("ReadOnly 系列")]),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#实现-readonly"},{default:p(()=>[n("实现 Readonly")]),_:1})]),s("li",null,[a(t,{to:"#实现-deepreadonly"},{default:p(()=>[n("🍔 实现 DeepReadOnly")]),_:1})]),s("li",null,[a(t,{to:"#实现-mutable"},{default:p(()=>[n("🍔 实现 Mutable")]),_:1})]),s("li",null,[a(t,{to:"#实现-deepmutable"},{default:p(()=>[n("🍔 实现 DeepMutable")]),_:1})])])]),s("li",null,[a(t,{to:"#字符串"},{default:p(()=>[n("字符串")]),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#实现字符串首字母大写"},{default:p(()=>[n("实现字符串首字母大写")]),_:1})]),s("li",null,[a(t,{to:"#实现字符串替换"},{default:p(()=>[n("实现字符串替换")]),_:1})]),s("li",null,[a(t,{to:"#实现获取字符串长度"},{default:p(()=>[n("实现获取字符串长度")]),_:1})]),s("li",null,[a(t,{to:"#实现字符串转换联合类型"},{default:p(()=>[n("实现字符串转换联合类型")]),_:1})]),s("li",null,[a(t,{to:"#实现是否是给定字符串开头"},{default:p(()=>[n("实现是否是给定字符串开头")]),_:1})]),s("li",null,[a(t,{to:"#实现去掉字符串空格"},{default:p(()=>[n("实现去掉字符串空格")]),_:1})]),s("li",null,[a(t,{to:"#实现删除符合要求的字符串"},{default:p(()=>[n("实现删除符合要求的字符串")]),_:1})]),s("li",null,[a(t,{to:"#实现驼峰命名转换短横线命名"},{default:p(()=>[n("✂️ 实现驼峰命名转换短横线命名")]),_:1})]),s("li",null,[a(t,{to:"#现判断一个字符串中字符是否重复"},{default:p(()=>[n("🍅 现判断一个字符串中字符是否重复")]),_:1})]),s("li",null,[a(t,{to:"#实现-单词首字母大写"},{default:p(()=>[n("🍅 实现 单词首字母大写")]),_:1})]),s("li",null,[a(t,{to:"#实现-camelcase"},{default:p(()=>[n("🍅 实现 CamelCase")]),_:1})]),s("li",null,[a(t,{to:"#实现-lengthofstring"},{default:p(()=>[n("❓ 实现 LengthOfString")]),_:1})])])]),s("li",null,[a(t,{to:"#函数系列"},{default:p(()=>[n("函数系列")]),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#实现获取函数返回类型"},{default:p(()=>[n("实现获取函数返回类型")]),_:1})]),s("li",null,[a(t,{to:"#实现参数追加"},{default:p(()=>[n("实现参数追加")]),_:1})]),s("li",null,[a(t,{to:"#实现函数参数反转"},{default:p(()=>[n("实现函数参数反转")]),_:1})])])]),s("li",null,[a(t,{to:"#object-系列"},{default:p(()=>[n("Object 系列")]),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#实现连两个对象合并"},{default:p(()=>[n("实现连两个对象合并")]),_:1})]),s("li",null,[a(t,{to:"#实现可配置可选链"},{default:p(()=>[n("🚪实现可配置可选链")]),_:1})]),s("li",null,[a(t,{to:"#实现为一个接口添加新类型"},{default:p(()=>[n("实现为一个接口添加新类型")]),_:1})]),s("li",null,[a(t,{to:"#实现-diff"},{default:p(()=>[n("🍵 实现 Diff")]),_:1})]),s("li",null,[a(t,{to:"#实现属性替换"},{default:p(()=>[n("🚀 实现属性替换")]),_:1})]),s("li",null,[a(t,{to:"#实现移除索引签名"},{default:p(()=>[n("🏁 实现移除索引签名")]),_:1})]),s("li",null,[a(t,{to:"#实现-entries"},{default:p(()=>[n("🤔 实现 Entries")]),_:1})]),s("li",null,[a(t,{to:"#实现-元组递归转换成对象"},{default:p(()=>[n("🤔 实现 元组递归转换成对象")]),_:1})]),s("li",null,[a(t,{to:"#实现-将元组转换成枚举"},{default:p(()=>[n("🤔 实现 将元组转换成枚举")]),_:1})])])]),s("li",null,[a(t,{to:"#其他"},{default:p(()=>[n("其他")]),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#实现-omit"},{default:p(()=>[n("实现 Omit")]),_:1})]),s("li",null,[a(t,{to:"#实现元组转换成联合类型"},{default:p(()=>[n("实现元组转换成联合类型")]),_:1})]),s("li",null,[a(t,{to:"#实现-absolute"},{default:p(()=>[n("实现 Absolute")]),_:1})]),s("li",null,[a(t,{to:"#实现-anyof"},{default:p(()=>[n("❓ 实现 Anyof")]),_:1})]),s("li",null,[a(t,{to:"#实现-isnever"},{default:p(()=>[n("❌ 实现 IsNever")]),_:1})]),s("li",null,[a(t,{to:"#实现-isunion"},{default:p(()=>[n("🤔 实现 isUnion")]),_:1})]),s("li",null,[a(t,{to:"#实现-minusone"},{default:p(()=>[n("🤔 实现 MinusOne")]),_:1})]),s("li",null,[a(t,{to:"#实现-pickbytype"},{default:p(()=>[n("实现 PickByType")]),_:1})]),s("li",null,[a(t,{to:"#实现-partialbykeys"},{default:p(()=>[n("🍅 实现 PartialByKeys")]),_:1})]),s("li",null,[a(t,{to:"#实现-omitbytype"},{default:p(()=>[n("实现 OmitByType")]),_:1})]),s("li",null,[a(t,{to:"#bem-架构"},{default:p(()=>[n("📄 Bem 架构")]),_:1})]),s("li",null,[a(t,{to:"#指定返回的联合类型"},{default:p(()=>[n("🍅 指定返回的联合类型")]),_:1})])])]),s("li",null,[a(t,{to:"#其他-1"},{default:p(()=>[n("其他")]),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#实现柯里化"},{default:p(()=>[n("🍅 实现柯里化")]),_:1})]),s("li",null,[a(t,{to:"#实现-getrequired"},{default:p(()=>[n("🍅 实现 GetRequired")]),_:1})]),s("li",null,[a(t,{to:"#实现-getrequiredkeys"},{default:p(()=>[n("🍅 实现 GetRequiredkeys")]),_:1})]),s("li",null,[a(t,{to:"#实现-getoptional"},{default:p(()=>[n("🍅 实现 GetOptional")]),_:1})]),s("li",null,[a(t,{to:"#实现-getoptionalkeys"},{default:p(()=>[n("🍅 实现 GetOptionalKeys")]),_:1})]),s("li",null,[a(t,{to:"#实现-promiseall"},{default:p(()=>[n("❌ 实现 PromiseAll")]),_:1})]),s("li",null,[a(t,{to:"#实现-jsonp"},{default:p(()=>[n("❌ 实现 JSONP")]),_:1})]),s("li",null,[a(t,{to:"#实现-simplevue"},{default:p(()=>[n("🍅 实现 SimpleVue")]),_:1})]),s("li",null,[a(t,{to:"#实现将字符串转换成数字"},{default:p(()=>[n("🍵 实现将字符串转换成数字")]),_:1})]),s("li",null,[a(t,{to:"#实现两数之和"},{default:p(()=>[n("🤔 实现两数之和")]),_:1})]),s("li",null,[a(t,{to:"#实现日期验证"},{default:p(()=>[n("😋 实现日期验证")]),_:1})]),s("li",null,[a(t,{to:"#实现-get"},{default:p(()=>[n("🍰 实现 Get")]),_:1})]),s("li",null,[a(t,{to:"#实现-maxnum"},{default:p(()=>[n("🍅 实现 MaxNum")]),_:1})])])])])]),y,s("p",null,[s("a",g,[n("本题解答地址"),a(e)])]),w,s("div",h,[x,s("ul",null,[s("li",null,[n("本题解法同"),s("a",f,[n("capitalizewords"),a(e)])]),T])]),R,s("p",null,[s("a",A,[n("点击查看本地解答地址"),a(e)])]),_,s("p",null,[s("a",q,[n("点击查看本地解答地址"),a(e)])]),U,s("p",null,[s("a",B,[n("点击查看本地解答地址"),a(e)])]),L,s("p",null,[s("a",M,[n("什么是索引签名？"),a(e)])]),S,s("p",null,[s("a",C,[n("本题解答地址"),a(e)])]),N,s("p",null,[n("想要消除分发特性，用 "),O,n(" 包裹下就行。 "),s("a",F,[n("TS分发特性"),a(e)])]),$,s("p",null,[s("a",I,[n("点击查看本地解答地址"),a(e)])]),K,s("p",null,[s("a",E,[n("点击查看本地解答地址"),a(e)])]),D,s("p",null,[s("a",P,[n("点击查看本地解答地址"),a(e)])]),G,s("p",null,[s("a",W,[n("点击查看本地解答地址"),a(e)])]),z,s("p",null,[s("a",V,[n("我的解答地址"),a(e)])]),j,s("p",null,[s("a",H,[n("本题我的解答地址"),a(e)])]),Y,s("p",null,[s("a",J,[n("本题我的解答地址"),a(e)])]),X,s("p",null,[s("a",Z,[n("本题解答地址"),a(e)])]),Q,s("ul",null,[s("li",null,[s("p",null,[s("a",ss,[n("ts训练营🚀"),a(e)])])]),s("li",null,[s("p",null,[s("a",ns,[n("maxiaobo🚀"),a(e)])])])])])}const os=l(k,[["render",as],["__file","02.TypeScript训练.html.vue"]]);export{os as default};
