import{_ as o,r as l,o as p,c,f as i,d as n,a as e,e as s,b as t}from"./app-e9249a1b.js";const r={},u=n("h1",{id:"eslint配置细则",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#eslint配置细则","aria-hidden":"true"},"#"),s(" Eslint配置细则")],-1),d={href:"https://github.com/standard/standard",target:"_blank",rel:"noopener noreferrer"},k=n("img",{src:"https://cdn.rawgit.com/standard/standard/master/badge.svg",alt:"js-standard-style"},null,-1),v={href:"https://github.com/standard/standard",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,"掌握本规范的最好方法是安装并在自己的代码中使用它。",-1),g=n("h2",{id:"细则",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#细则","aria-hidden":"true"},"#"),s(" 细则")],-1),_=n("p",null,[n("strong",null,"使用两个空格"),s("进行缩进。")],-1),b={href:"http://eslint.org/docs/rules/indent",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"indent",-1),f=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">hello</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),y=n("p",null,[s("除需要转义的情况外，"),n("strong",null,"字符串统一使用单引号"),s("。")],-1),j={href:"http://eslint.org/docs/rules/quotes",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"quotes",-1),x=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello there&#39;</span><span class="token punctuation">)</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;div class=&#39;box&#39;&gt;&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),S=n("p",null,[n("strong",null,"不要定义未使用的变量"),s("。")],-1),E={href:"http://eslint.org/docs/rules/no-unused-vars",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"no-unused-vars",-1),N=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myFunction</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">something</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),q=n("p",null,[n("strong",null,"关键字后面加空格"),s("。")],-1),F={href:"http://eslint.org/docs/rules/keyword-spacing",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"keyword-spacing",-1),R=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>   <span class="token comment">// ✓ ok</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),O=n("p",null,[n("strong",null,"函数声明时括号与函数名间加空格"),s("。")],-1),A={href:"http://eslint.org/docs/rules/space-before-function-paren",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"space-before-function-paren",-1),I=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>   <span class="token comment">// ✓ ok</span>
<span class="token keyword">function</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>

<span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token comment">// ✓ ok</span>
<span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),U=n("p",null,[n("strong",null,"始终使用"),s(),n("code",null,"==="),s(" 替代 "),n("code",null,"=="),s("。"),n("br"),s(" 例外： "),n("code",null,"obj == null"),s(" 可以用来检查 "),n("code",null,"null || undefined"),s("。")],-1),z={href:"http://eslint.org/docs/rules/eqeqeq",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"eqeqeq",-1),H=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!==</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,2),T=n("p",null,[n("strong",null,"字符串拼接操作符 (Infix operators)"),s(" 之间要留空格。")],-1),V={href:"http://eslint.org/docs/rules/space-infix-ops",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"space-infix-ops",-1),$=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&#39;hello, &#39;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&#39;!&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ✗ avoid</span>
<span class="token keyword">var</span> x<span class="token operator">=</span><span class="token number">2</span>
<span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&#39;hello, &#39;</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">&#39;!&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),M=n("p",null,[n("strong",null,"逗号后面加空格"),s("。")],-1),P={href:"http://eslint.org/docs/rules/comma-spacing",target:"_blank",rel:"noopener noreferrer"},Y=n("code",null,"comma-spacing",-1),K=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>
<span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">function</span> <span class="token function">greet</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ✗ avoid</span>
<span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">function</span> <span class="token function">greet</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),G=n("p",null,[n("strong",null,"else 关键字要与花括号"),s("保持在同一行。")],-1),Q={href:"http://eslint.org/docs/rules/brace-style",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"brace-style",-1),X=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ✗ avoid</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span>
<span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Z=n("p",null,[n("strong",null,"多行 if 语句的"),s("的括号不能省。")],-1),nn={href:"http://eslint.org/docs/rules/curly",target:"_blank",rel:"noopener noreferrer"},sn=n("code",null,"curly",-1),an=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>quiet <span class="token operator">!==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>quiet <span class="token operator">!==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ✗ avoid</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>quiet <span class="token operator">!==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),en=n("p",null,[n("strong",null,"不要丢掉"),s("异常处理中"),n("code",null,"err"),s("参数。")],-1),tn={href:"http://eslint.org/docs/rules/handle-callback-err",target:"_blank",rel:"noopener noreferrer"},on=n("code",null,"handle-callback-err",-1),ln=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>
<span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
  window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ✗ avoid</span>
<span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),pn=n("p",null,[n("strong",null,"使用浏览器全局变量时加上"),s(),n("code",null,"window."),s(" 前缀。"),n("br"),n("code",null,"document"),s("、"),n("code",null,"console"),s(" 和 "),n("code",null,"navigator"),s(" 除外。")],-1),cn={href:"http://eslint.org/docs/rules/no-undef",target:"_blank",rel:"noopener noreferrer"},rn=n("code",null,"no-undef",-1),un=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),dn=n("p",null,[n("strong",null,"不允许有连续多行空行"),s("。")],-1),kn={href:"http://eslint.org/docs/rules/no-multiple-empty-lines",target:"_blank",rel:"noopener noreferrer"},vn=n("code",null,"no-multiple-empty-lines",-1),mn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>
<span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ✗ avoid</span>
<span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>


console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),gn=n("p",null,[n("strong",null,"对于三元运算符"),s(),n("code",null,"?"),s(" 和 "),n("code",null,":"),s(" 与他们所负责的代码处于同一行")],-1),_n={href:"http://eslint.org/docs/rules/operator-linebreak",target:"_blank",rel:"noopener noreferrer"},bn=n("code",null,"operator-linebreak",-1),hn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>
<span class="token keyword">var</span> location <span class="token operator">=</span> env<span class="token punctuation">.</span>development <span class="token operator">?</span> <span class="token string">&#39;localhost&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;www.api.com&#39;</span>

<span class="token comment">// ✓ ok</span>
<span class="token keyword">var</span> location <span class="token operator">=</span> env<span class="token punctuation">.</span>development
  <span class="token operator">?</span> <span class="token string">&#39;localhost&#39;</span>
  <span class="token operator">:</span> <span class="token string">&#39;www.api.com&#39;</span>

<span class="token comment">// ✗ avoid</span>
<span class="token keyword">var</span> location <span class="token operator">=</span> env<span class="token punctuation">.</span>development <span class="token operator">?</span>
  <span class="token string-property property">&#39;localhost&#39;</span> <span class="token operator">:</span>
  <span class="token string">&#39;www.api.com&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),fn=n("p",null,[n("strong",null,"每个 var 关键字"),s("单独声明一个变量。")],-1),yn={href:"http://eslint.org/docs/rules/one-var",target:"_blank",rel:"noopener noreferrer"},jn=n("code",null,"one-var",-1),wn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>
<span class="token keyword">var</span> silent <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">var</span> verbose <span class="token operator">=</span> <span class="token boolean">true</span>

<span class="token comment">// ✗ avoid</span>
<span class="token keyword">var</span> silent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> verbose <span class="token operator">=</span> <span class="token boolean">true</span>

<span class="token comment">// ✗ avoid</span>
<span class="token keyword">var</span> silent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    verbose <span class="token operator">=</span> <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),xn=n("p",null,[n("strong",null,"条件语句中赋值语句"),s("使用括号包起来。这样使得代码更加清晰可读，而不会认为是将条件判断语句的全等号（"),n("code",null,"==="),s("）错写成了等号（"),n("code",null,"="),s("）。")],-1),Sn={href:"http://eslint.org/docs/rules/no-cond-assign",target:"_blank",rel:"noopener noreferrer"},En=n("code",null,"no-cond-assign",-1),Jn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token comment">// ✗ avoid</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Nn=n("p",null,[n("strong",null,"单行代码块两边加空格"),s("。")],-1),qn={href:"http://eslint.org/docs/rules/block-spacing",target:"_blank",rel:"noopener noreferrer"},Fn=n("code",null,"block-spacing",-1),Ln=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>
  <span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>  <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Rn=n("p",null,[n("strong",null,"对于变量和函数名统一使用驼峰命名法"),s("。")],-1),On={href:"http://eslint.org/docs/rules/camelcase",target:"_blank",rel:"noopener noreferrer"},An=n("code",null,"camelcase",-1),Dn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">my_function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>
  <span class="token keyword">function</span> <span class="token function">myFunction</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>     <span class="token comment">// ✓ ok</span>

  <span class="token keyword">var</span> my_var <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>           <span class="token comment">// ✗ avoid</span>
  <span class="token keyword">var</span> myVar <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>            <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),In=n("p",null,[n("strong",null,"不允许有多余的行末逗号"),s("。")],-1),Un={href:"http://eslint.org/docs/rules/comma-dangle",target:"_blank",rel:"noopener noreferrer"},zn=n("code",null,"comma-dangle",-1),Cn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span>   <span class="token comment">// ✗ avoid</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Hn=n("p",null,[n("strong",null,"始终将逗号置于行末"),s("。")],-1),Tn={href:"http://eslint.org/docs/rules/comma-style",target:"_blank",rel:"noopener noreferrer"},Vn=n("code",null,"comma-style",-1),Bn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span>
    <span class="token punctuation">,</span><span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span>   <span class="token comment">// ✗ avoid</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span>   <span class="token comment">// ✓ ok</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),$n=n("p",null,[n("strong",null,"点号操作符须与属性需在同一行"),s("。")],-1),Mn={href:"http://eslint.org/docs/rules/dot-location",target:"_blank",rel:"noopener noreferrer"},Pn=n("code",null,"dot-location",-1),Yn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  console<span class="token punctuation">.</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// ✗ avoid</span>

  console
    <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Kn=n("p",null,[n("strong",null,"文件末尾留一空行"),s("。")],-1),Gn={href:"http://eslint.org/docs/rules/eol-last",target:"_blank",rel:"noopener noreferrer"},Qn=n("code",null,"eol-last",-1),Wn=n("p",null,[n("strong",null,"函数调用时标识符与括号间不留间隔"),s("。")],-1),Xn={href:"http://eslint.org/docs/rules/func-call-spacing",target:"_blank",rel:"noopener noreferrer"},Zn=n("code",null,"func-call-spacing",-1),ns=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span> <span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// ✗ avoid</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ss=n("p",null,[n("strong",null,"键值对当中冒号与值之间要留空白"),s("。")],-1),as={href:"http://eslint.org/docs/rules/key-spacing",target:"_blank",rel:"noopener noreferrer"},es=n("code",null,"key-spacing",-1),ts=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;key&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;value&#39;</span> <span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;key&#39;</span> <span class="token operator">:</span><span class="token string">&#39;value&#39;</span> <span class="token punctuation">}</span>     <span class="token comment">// ✗ avoid</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;key&#39;</span><span class="token operator">:</span><span class="token string">&#39;value&#39;</span> <span class="token punctuation">}</span>      <span class="token comment">// ✗ avoid</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;key&#39;</span><span class="token operator">:</span> <span class="token string">&#39;value&#39;</span> <span class="token punctuation">}</span>     <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),os=n("p",null,[n("strong",null,"构造函数要以大写字母开头"),s("。")],-1),ls={href:"http://eslint.org/docs/rules/new-cap",target:"_blank",rel:"noopener noreferrer"},ps=n("code",null,"new-cap",-1),cs=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">animal</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>

<span class="token keyword">function</span> <span class="token function">Animal</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),is=n("p",null,[n("strong",null,"无参的构造函数调用时要带上括号"),s("。")],-1),rs={href:"http://eslint.org/docs/rules/new-parens",target:"_blank",rel:"noopener noreferrer"},us=n("code",null,"new-parens",-1),ds=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Animal</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span>    <span class="token comment">// ✗ avoid</span>
<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ks=n("p",null,[n("strong",null,"对象中定义了存值器，一定要对应的定义取值器"),s("。")],-1),vs={href:"http://eslint.org/docs/rules/accessor-pairs",target:"_blank",rel:"noopener noreferrer"},ms=n("code",null,"accessor-pairs",-1),gs=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">set</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ✗ avoid</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> value
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">set</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> value
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">get</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">// ✓ ok</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),_s=n("p",null,[n("strong",null,[s("子类的构造器中一定要调用 "),n("code",null,"super")])],-1),bs={href:"http://eslint.org/docs/rules/constructor-super",target:"_blank",rel:"noopener noreferrer"},hs=n("code",null,"constructor-super",-1),fs=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Mammal</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ys=n("p",null,[n("strong",null,"使用数组字面量而不是构造器"),s("。")],-1),js={href:"http://eslint.org/docs/rules/no-array-constructor",target:"_blank",rel:"noopener noreferrer"},ws=n("code",null,"no-array-constructor",-1),xs=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>
<span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>            <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ss=n("p",null,[n("strong",null,[s("避免使用 "),n("code",null,"arguments.callee"),s(" 和 "),n("code",null,"arguments.caller")]),s("。")],-1),Es={href:"http://eslint.org/docs/rules/no-caller",target:"_blank",rel:"noopener noreferrer"},Js=n("code",null,"no-caller",-1),Ns=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span>

  arguments<span class="token punctuation">.</span><span class="token function">callee</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span>

  <span class="token function">foo</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),qs=n("p",null,[n("strong",null,"避免对类名重新赋值"),s("。")],-1),Fs={href:"http://eslint.org/docs/rules/no-class-assign",target:"_blank",rel:"noopener noreferrer"},Ls=n("code",null,"no-class-assign",-1),Rs=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
Dog <span class="token operator">=</span> <span class="token string">&#39;Fido&#39;</span>    <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Os=n("p",null,[n("strong",null,[s("避免修改使用 "),n("code",null,"const"),s(" 声明的变量")]),s("。")],-1),As={href:"http://eslint.org/docs/rules/no-const-assign",target:"_blank",rel:"noopener noreferrer"},Ds=n("code",null,"no-const-assign",-1),Is=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> score <span class="token operator">=</span> <span class="token number">100</span>
score <span class="token operator">=</span> <span class="token number">125</span>       <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Us=n("p",null,[n("strong",null,"避免使用常量作为条件表达式的条件（循环语句除外）"),s("。")],-1),zs={href:"http://eslint.org/docs/rules/no-constant-condition",target:"_blank",rel:"noopener noreferrer"},Cs=n("code",null,"no-constant-condition",-1),Hs=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ✗ avoid</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// ✓ ok</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// ✓ ok</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ts=n("p",null,[n("strong",null,"正则中不要使用控制符"),s("。")],-1),Vs={href:"http://eslint.org/docs/rules/no-control-regex",target:"_blank",rel:"noopener noreferrer"},Bs=n("code",null,"no-control-regex",-1),$s=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\x1f</span><span class="token regex-delimiter">/</span></span>    <span class="token comment">// ✗ avoid</span>
<span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\x20</span><span class="token regex-delimiter">/</span></span>    <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ms=n("p",null,[n("strong",null,[s("不要使用 "),n("code",null,"debugger")]),s("。")],-1),Ps={href:"http://eslint.org/docs/rules/no-debugger",target:"_blank",rel:"noopener noreferrer"},Ys=n("code",null,"no-debugger",-1),Ks=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">debugger</span>      <span class="token comment">// ✗ avoid</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Gs=n("p",null,[n("strong",null,[s("不要对变量使用 "),n("code",null,"delete"),s(" 操作")]),s("。")],-1),Qs={href:"http://eslint.org/docs/rules/no-delete-var",target:"_blank",rel:"noopener noreferrer"},Ws=n("code",null,"no-delete-var",-1),Xs=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> name
<span class="token keyword">delete</span> name     <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Zs=n("p",null,[n("strong",null,"不要定义冗余的函数参数"),s("。")],-1),na={href:"http://eslint.org/docs/rules/no-dupe-args",target:"_blank",rel:"noopener noreferrer"},sa=n("code",null,"no-dupe-args",-1),aa=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// ✗ avoid</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">sum</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// ✓ ok</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ea=n("p",null,[n("strong",null,"类中不要定义冗余的属性"),s("。")],-1),ta={href:"http://eslint.org/docs/rules/no-dupe-class-members",target:"_blank",rel:"noopener noreferrer"},oa=n("code",null,"no-dupe-class-members",-1),la=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>
  <span class="token function">bark</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">bark</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),pa=n("p",null,[n("strong",null,"对象字面量中不要定义重复的属性"),s("。")],-1),ca={href:"http://eslint.org/docs/rules/no-dupe-keys",target:"_blank",rel:"noopener noreferrer"},ia=n("code",null,"no-dupe-keys",-1),ra=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Jane Doe&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span>    <span class="token comment">// ✗ avoid</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ua=n("p",null,[n("strong",null,[n("code",null,"switch"),s(" 语句中不要定义重复的 "),n("code",null,"case"),s(" 分支")]),s("。")],-1),da={href:"http://eslint.org/docs/rules/no-duplicate-case",target:"_blank",rel:"noopener noreferrer"},ka=n("code",null,"no-duplicate-case",-1),va=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
    <span class="token comment">// ...</span>
  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>     <span class="token comment">// ✗ avoid</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ma=n("p",null,[n("strong",null,"同一模块有多个导入时一次性写完"),s("。")],-1),ga={href:"http://eslint.org/docs/rules/no-duplicate-imports",target:"_blank",rel:"noopener noreferrer"},_a=n("code",null,"no-duplicate-imports",-1),ba=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> myFunc1 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;module&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> myFunc2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;module&#39;</span>          <span class="token comment">// ✗ avoid</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> myFunc1<span class="token punctuation">,</span> myFunc2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;module&#39;</span> <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ha=n("p",null,[n("strong",null,"正则中不要使用空字符"),s("。")],-1),fa={href:"http://eslint.org/docs/rules/no-empty-character-class",target:"_blank",rel:"noopener noreferrer"},ya=n("code",null,"no-empty-character-class",-1),ja=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^abc[]</span><span class="token regex-delimiter">/</span></span>      <span class="token comment">// ✗ avoid</span>
<span class="token keyword">const</span> myRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^abc[a-z]</span><span class="token regex-delimiter">/</span></span>   <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),wa=n("p",null,[n("strong",null,"不要解构空值"),s("。")],-1),xa={href:"http://eslint.org/docs/rules/no-empty-pattern",target:"_blank",rel:"noopener noreferrer"},Sa=n("code",null,"no-empty-pattern",-1),Ea=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> foo         <span class="token comment">// ✗ avoid</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span> b <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> foo      <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ja=n("p",null,[n("strong",null,[s("不要使用 "),n("code",null,"eval()")]),s("。")],-1),Na={href:"http://eslint.org/docs/rules/no-eval",target:"_blank",rel:"noopener noreferrer"},qa=n("code",null,"no-eval",-1),Fa=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">eval</span><span class="token punctuation">(</span> <span class="token string">&quot;var result = user.&quot;</span> <span class="token operator">+</span> propName <span class="token punctuation">)</span> <span class="token comment">// ✗ avoid</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> user<span class="token punctuation">[</span>propName<span class="token punctuation">]</span>             <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),La=n("p",null,[n("strong",null,[n("code",null,"catch"),s(" 中不要对错误重新赋值")]),s("。")],-1),Ra={href:"http://eslint.org/docs/rules/no-ex-assign",target:"_blank",rel:"noopener noreferrer"},Oa=n("code",null,"no-ex-assign",-1),Aa=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  e <span class="token operator">=</span> <span class="token string">&#39;new value&#39;</span>             <span class="token comment">// ✗ avoid</span>
<span class="token punctuation">}</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> newVal <span class="token operator">=</span> <span class="token string">&#39;new value&#39;</span>  <span class="token comment">// ✓ ok</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Da=n("p",null,[n("strong",null,"不要扩展原生对象"),s("。")],-1),Ia={href:"http://eslint.org/docs/rules/no-extend-native",target:"_blank",rel:"noopener noreferrer"},Ua=n("code",null,"no-extend-native",-1),za=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">21</span>     <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),Ca=n("p",null,[n("strong",null,"避免多余的函数上下文绑定"),s("。")],-1),Ha={href:"http://eslint.org/docs/rules/no-extra-bind",target:"_blank",rel:"noopener noreferrer"},Ta=n("code",null,"no-extra-bind",-1),Va=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">name</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>

<span class="token keyword">const</span> <span class="token function-variable function">name</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>    <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ba=n("p",null,[n("strong",null,"避免不必要的布尔转换"),s("。")],-1),$a={href:"http://eslint.org/docs/rules/no-extra-boolean-cast",target:"_blank",rel:"noopener noreferrer"},Ma=n("code",null,"no-extra-boolean-cast",-1),Pa=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// ✗ avoid</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// ✓ ok</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ya=n("p",null,[n("strong",null,"不要使用多余的括号包裹函数"),s("。")],-1),Ka={href:"http://eslint.org/docs/rules/no-extra-parens",target:"_blank",rel:"noopener noreferrer"},Ga=n("code",null,"no-extra-parens",-1),Qa=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>
<span class="token keyword">const</span> <span class="token function-variable function">myFunc</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>     <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Wa=n("p",null,[n("strong",null,[n("code",null,"switch"),s(" 一定要使用 "),n("code",null,"break"),s(" 来将条件分支正常中断")]),s("。")],-1),Xa={href:"http://eslint.org/docs/rules/no-fallthrough",target:"_blank",rel:"noopener noreferrer"},Za=n("code",null,"no-fallthrough",-1),ne=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>filter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>
  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
    <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">switch</span> <span class="token punctuation">(</span>filter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">break</span>           <span class="token comment">// ✓ ok</span>
  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
    <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">switch</span> <span class="token punctuation">(</span>filter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// fallthrough  // ✓ ok</span>
  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
    <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),se=n("p",null,[n("strong",null,"不要省去小数点前面的0"),s("。")],-1),ae={href:"http://eslint.org/docs/rules/no-floating-decimal",target:"_blank",rel:"noopener noreferrer"},ee=n("code",null,"no-floating-decimal",-1),te=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> discount <span class="token operator">=</span> <span class="token number">.5</span>      <span class="token comment">// ✗ avoid</span>
<span class="token keyword">const</span> discount <span class="token operator">=</span> <span class="token number">0.5</span>     <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),oe=n("p",null,[n("strong",null,"避免对声明过的函数重新赋值"),s("。")],-1),le={href:"http://eslint.org/docs/rules/no-func-assign",target:"_blank",rel:"noopener noreferrer"},pe=n("code",null,"no-func-assign",-1),ce=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myFunc</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
myFunc <span class="token operator">=</span> myOtherFunc    <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ie=n("p",null,[n("strong",null,"不要对全局只读对象重新赋值"),s("。")],-1),re={href:"http://eslint.org/docs/rules/no-global-assign",target:"_blank",rel:"noopener noreferrer"},ue=n("code",null,"no-global-assign",-1),de=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),ke=n("p",null,[n("strong",null,[s("注意隐式的 "),n("code",null,"eval()")]),s("。")],-1),ve={href:"http://eslint.org/docs/rules/no-implied-eval",target:"_blank",rel:"noopener noreferrer"},me=n("code",null,"no-implied-eval",-1),ge=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">&quot;alert(&#39;Hello world&#39;)&quot;</span><span class="token punctuation">)</span>                   <span class="token comment">// ✗ avoid</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),_e=n("p",null,[n("strong",null,"嵌套的代码块中禁止再定义函数"),s("。")],-1),be={href:"http://eslint.org/docs/rules/no-inner-declarations",target:"_blank",rel:"noopener noreferrer"},he=n("code",null,"no-inner-declarations",-1),fe=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>authenticated<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">setAuthUser</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ye=n("p",null,[n("strong",null,[s("不要向 "),n("code",null,"RegExp"),s(" 构造器传入非法的正则表达式")]),s("。")],-1),je={href:"http://eslint.org/docs/rules/no-invalid-regexp",target:"_blank",rel:"noopener noreferrer"},we=n("code",null,"no-invalid-regexp",-1),xe=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;[a-z&#39;</span><span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>
<span class="token function">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;[a-z]&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Se=n("p",null,[n("strong",null,"不要使用非法的空白符"),s("。")],-1),Ee={href:"http://eslint.org/docs/rules/no-irregular-whitespace",target:"_blank",rel:"noopener noreferrer"},Je=n("code",null,"no-irregular-whitespace",-1),Ne=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myFunc</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">/*&lt;NBSP&gt;*/</span><span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),qe=n("p",null,[n("strong",null,[s("禁止使用 "),n("code",null,"__iterator__")]),s("。")],-1),Fe={href:"http://eslint.org/docs/rules/no-iterator",target:"_blank",rel:"noopener noreferrer"},Le=n("code",null,"no-iterator",-1),Re=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">__iterator__</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),Oe=n("p",null,[n("strong",null,"外部变量不要与对象属性重名"),s("。")],-1),Ae={href:"http://eslint.org/docs/rules/no-label-var",target:"_blank",rel:"noopener noreferrer"},De=n("code",null,"no-label-var",-1),Ie=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">function</span> <span class="token function">game</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// ✗ avoid</span>
    score <span class="token operator">-=</span> <span class="token number">10</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span> score
    <span class="token keyword">break</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ue=n("p",null,[n("strong",null,"不要使用标签语句"),s("。")],-1),ze={href:"http://eslint.org/docs/rules/no-labels",target:"_blank",rel:"noopener noreferrer"},Ce=n("code",null,"no-labels",-1),He=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">label</span><span class="token operator">:</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">break</span> label     <span class="token comment">// ✗ avoid</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Te=n("p",null,[n("strong",null,"不要书写不必要的嵌套代码块"),s("。")],-1),Ve={href:"http://eslint.org/docs/rules/no-lone-blocks",target:"_blank",rel:"noopener noreferrer"},Be=n("code",null,"no-lone-blocks",-1),$e=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myFunc</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">{</span>                   <span class="token comment">// ✗ avoid</span>
    <span class="token function">myOtherFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">myFunc</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">myOtherFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment">// ✓ ok</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Me=n("p",null,[n("strong",null,"不要混合使用空格与制表符作为缩进"),s("。")],-1),Pe={href:"http://eslint.org/docs/rules/no-mixed-spaces-and-tabs",target:"_blank",rel:"noopener noreferrer"},Ye=n("code",null,"no-mixed-spaces-and-tabs",-1),Ke=n("p",null,[n("strong",null,"除了缩进，不要使用多个空格"),s("。")],-1),Ge={href:"http://eslint.org/docs/rules/no-multi-spaces",target:"_blank",rel:"noopener noreferrer"},Qe=n("code",null,"no-multi-spaces",-1),We=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> id <span class="token operator">=</span>    <span class="token number">1234</span>    <span class="token comment">// ✗ avoid</span>
<span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token number">1234</span>       <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Xe=n("p",null,[n("strong",null,"不要使用多行字符串"),s("。")],-1),Ze={href:"http://eslint.org/docs/rules/no-multi-str",target:"_blank",rel:"noopener noreferrer"},nt=n("code",null,"no-multi-str",-1),st=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token string">&#39;Hello \\
                 world&#39;</span>     <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),at=n("p",null,[n("strong",null,[n("code",null,"new"),s(" 创建对象实例后需要赋值给变量")]),s("。")],-1),et={href:"http://eslint.org/docs/rules/no-new",target:"_blank",rel:"noopener noreferrer"},tt=n("code",null,"no-new",-1),ot=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token comment">// ✗ avoid</span>
<span class="token keyword">const</span> character <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),lt=n("p",null,[n("strong",null,[s("禁止使用 "),n("code",null,"Function"),s(" 构造器")]),s("。")],-1),pt={href:"http://eslint.org/docs/rules/no-new-func",target:"_blank",rel:"noopener noreferrer"},ct=n("code",null,"no-new-func",-1),it=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;return a + b&#39;</span><span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),rt=n("p",null,[n("strong",null,[s("禁止使用 "),n("code",null,"Object"),s(" 构造器")]),s("。")],-1),ut={href:"http://eslint.org/docs/rules/no-new-object",target:"_blank",rel:"noopener noreferrer"},dt=n("code",null,"no-new-object",-1),kt=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),vt=n("p",null,[n("strong",null,[s("禁止使用 "),n("code",null,"new require")]),s("。")],-1),mt={href:"http://eslint.org/docs/rules/no-new-require",target:"_blank",rel:"noopener noreferrer"},gt=n("code",null,"no-new-require",-1),_t=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myModule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">require</span><span class="token punctuation">(</span><span class="token string">&#39;my-module&#39;</span><span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),bt=n("p",null,[n("strong",null,[s("禁止使用 "),n("code",null,"Symbol"),s(" 构造器")]),s("。")],-1),ht={href:"http://eslint.org/docs/rules/no-new-symbol",target:"_blank",rel:"noopener noreferrer"},ft=n("code",null,"no-new-symbol",-1),yt=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),jt=n("p",null,[n("strong",null,"禁止使用原始包装器"),s("。")],-1),wt={href:"http://eslint.org/docs/rules/no-new-wrappers",target:"_blank",rel:"noopener noreferrer"},xt=n("code",null,"no-new-wrappers",-1),St=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),Et=n("p",null,[n("strong",null,"不要将全局对象的属性作为函数调用"),s("。")],-1),Jt={href:"http://eslint.org/docs/rules/no-obj-calls",target:"_blank",rel:"noopener noreferrer"},Nt=n("code",null,"no-obj-calls",-1),qt=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> math <span class="token operator">=</span> <span class="token function">Math</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),Ft=n("p",null,[n("strong",null,"不要使用八进制字面量"),s("。")],-1),Lt={href:"http://eslint.org/docs/rules/no-octal",target:"_blank",rel:"noopener noreferrer"},Rt=n("code",null,"no-octal",-1),Ot=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> octal <span class="token operator">=</span> <span class="token number">042</span>         <span class="token comment">// ✗ avoid</span>
<span class="token keyword">const</span> decimal <span class="token operator">=</span> <span class="token number">34</span>        <span class="token comment">// ✓ ok</span>
<span class="token keyword">const</span> octalString <span class="token operator">=</span> <span class="token string">&#39;042&#39;</span> <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),At=n("p",null,[n("strong",null,"字符串字面量中也不要使用八进制转义字符"),s("。")],-1),Dt={href:"http://eslint.org/docs/rules/no-octal-escape",target:"_blank",rel:"noopener noreferrer"},It=n("code",null,"no-octal-escape",-1),Ut=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> copyright <span class="token operator">=</span> <span class="token string">&#39;Copyright \\251&#39;</span>  <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),zt=n("p",null,[n("strong",null,[s("使用 "),n("code",null,"__dirname"),s(" 和 "),n("code",null,"__filename"),s(" 时尽量避免使用字符串拼接")]),s("。")],-1),Ct={href:"http://eslint.org/docs/rules/no-path-concat",target:"_blank",rel:"noopener noreferrer"},Ht=n("code",null,"no-path-concat",-1),Tt=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pathToFile <span class="token operator">=</span> __dirname <span class="token operator">+</span> <span class="token string">&#39;/app.js&#39;</span>            <span class="token comment">// ✗ avoid</span>
<span class="token keyword">const</span> pathToFile <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;app.js&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Vt=n("p",null,[s("使用 "),n("code",null,"getPrototypeOf"),s(" 来替代 "),n("strong",null,[n("code",null,"__proto__")]),s("。")],-1),Bt={href:"http://eslint.org/docs/rules/no-proto",target:"_blank",rel:"noopener noreferrer"},$t=n("code",null,"no-proto",-1),Mt=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> obj<span class="token punctuation">.</span>__proto__               <span class="token comment">// ✗ avoid</span>
<span class="token keyword">const</span> foo <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Pt=n("p",null,[n("strong",null,"不要重复声明变量"),s("。")],-1),Yt={href:"http://eslint.org/docs/rules/no-redeclare",target:"_blank",rel:"noopener noreferrer"},Kt=n("code",null,"no-redeclare",-1),Gt=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;John&#39;</span>
<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;Jane&#39;</span>     <span class="token comment">// ✗ avoid</span>

<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;John&#39;</span>
name <span class="token operator">=</span> <span class="token string">&#39;Jane&#39;</span>         <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Qt=n("p",null,[n("strong",null,"正则中避免使用多个空格"),s("。")],-1),Wt={href:"http://eslint.org/docs/rules/no-regex-spaces",target:"_blank",rel:"noopener noreferrer"},Xt=n("code",null,"no-regex-spaces",-1),Zt=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">test   value</span><span class="token regex-delimiter">/</span></span>   <span class="token comment">// ✗ avoid</span>

<span class="token keyword">const</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">test {3}value</span><span class="token regex-delimiter">/</span></span>  <span class="token comment">// ✓ ok</span>
<span class="token keyword">const</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">test value</span><span class="token regex-delimiter">/</span></span>     <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),no=n("p",null,[n("strong",null,"return 语句中的赋值必需有括号包裹"),s("。")],-1),so={href:"http://eslint.org/docs/rules/no-return-assign",target:"_blank",rel:"noopener noreferrer"},ao=n("code",null,"no-return-assign",-1),eo=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> result <span class="token operator">=</span> a <span class="token operator">+</span> b     <span class="token comment">// ✗ avoid</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">sum</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),to=n("p",null,[n("strong",null,"避免将变量赋值给自己"),s("。")],-1),oo={href:"http://eslint.org/docs/rules/no-self-assign",target:"_blank",rel:"noopener noreferrer"},lo=n("code",null,"no-self-assign",-1),po=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>name <span class="token operator">=</span> name   <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),co=n("p",null,[n("strong",null,"避免将变量与自己进行比较操作"),s("。")],-1),io={href:"http://eslint.org/docs/rules/no-self-compare",target:"_blank",rel:"noopener noreferrer"},ro=n("code",null,"no-self-compare",-1),uo=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">===</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),ko=n("p",null,[n("strong",null,"避免使用逗号操作符"),s("。")],-1),vo={href:"http://eslint.org/docs/rules/no-sequences",target:"_blank",rel:"noopener noreferrer"},mo=n("code",null,"no-sequences",-1),go=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">!</span><span class="token operator">!</span>test<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),_o=n("p",null,[n("strong",null,"不要随意更改关键字的值"),s("。")],-1),bo={href:"http://eslint.org/docs/rules/no-shadow-restricted-names",target:"_blank",rel:"noopener noreferrer"},ho=n("code",null,"no-shadow-restricted-names",-1),fo=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token string">&#39;value&#39;</span>     <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),yo=n("p",null,[n("strong",null,"禁止使用稀疏数组（Sparse arrays）"),s("。")],-1),jo={href:"http://eslint.org/docs/rules/no-sparse-arrays",target:"_blank",rel:"noopener noreferrer"},wo=n("code",null,"no-sparse-arrays",-1),xo=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span><span class="token punctuation">,</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">]</span>       <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),So=n("p",null,[n("strong",null,"不要使用制表符"),s("。")],-1),Eo={href:"http://eslint.org/docs/rules/no-tabs",target:"_blank",rel:"noopener noreferrer"},Jo=n("code",null,"no-tabs",-1),No=n("p",null,[n("strong",null,"正确使用 ES6 中的字符串模板"),s("。")],-1),qo={href:"http://eslint.org/docs/rules/no-template-curly-in-string",target:"_blank",rel:"noopener noreferrer"},Fo=n("code",null,"no-template-curly-in-string",-1),Lo=t('<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token string">&#39;Hello ${name}&#39;</span>   <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>   <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>',1),Ro=n("p",null,[n("strong",null,[s("使用 "),n("code",null,"this"),s(" 前请确保 "),n("code",null,"super()"),s(" 已调用")]),s("。")],-1),Oo={href:"http://eslint.org/docs/rules/no-this-before-super",target:"_blank",rel:"noopener noreferrer"},Ao=n("code",null,"no-this-before-super",-1),Do=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>legs <span class="token operator">=</span> <span class="token number">4</span>     <span class="token comment">// ✗ avoid</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Io=n("p",null,[n("strong",null,[s("用 "),n("code",null,"throw"),s(" 抛错时，抛出 "),n("code",null,"Error"),s(" 对象而不是字符串")]),s("。")],-1),Uo={href:"http://eslint.org/docs/rules/no-throw-literal",target:"_blank",rel:"noopener noreferrer"},zo=n("code",null,"no-throw-literal",-1),Co=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">throw</span> <span class="token string">&#39;error&#39;</span>               <span class="token comment">// ✗ avoid</span>
<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span>    <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ho=n("p",null,[n("strong",null,"行末不留空格"),s("。")],-1),To={href:"http://eslint.org/docs/rules/no-trailing-spaces",target:"_blank",rel:"noopener noreferrer"},Vo=n("code",null,"no-trailing-spaces",-1),Bo=n("p",null,[n("strong",null,[s("不要使用 "),n("code",null,"undefined"),s(" 来初始化变量")]),s("。")],-1),$o={href:"http://eslint.org/docs/rules/no-undef-init",target:"_blank",rel:"noopener noreferrer"},Mo=n("code",null,"no-undef-init",-1),Po=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token keyword">undefined</span>    <span class="token comment">// ✗ avoid</span>

<span class="token keyword">let</span> name
name <span class="token operator">=</span> <span class="token string">&#39;value&#39;</span>          <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Yo=n("p",null,[n("strong",null,"循环语句中注意更新循环变量"),s("。")],-1),Ko={href:"http://eslint.org/docs/rules/no-unmodified-loop-condition",target:"_blank",rel:"noopener noreferrer"},Go=n("code",null,"no-unmodified-loop-condition",-1),Qo=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Wo=n("p",null,[n("strong",null,"如果有更好的实现，尽量不要使用三元表达式"),s("。")],-1),Xo={href:"http://eslint.org/docs/rules/no-unneeded-ternary",target:"_blank",rel:"noopener noreferrer"},Zo=n("code",null,"no-unneeded-ternary",-1),nl=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> score <span class="token operator">=</span> val <span class="token operator">?</span> val <span class="token operator">:</span> <span class="token number">0</span>     <span class="token comment">// ✗ avoid</span>
<span class="token keyword">let</span> score <span class="token operator">=</span> val <span class="token operator">||</span> <span class="token number">0</span>          <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),sl=n("p",null,[n("strong",null,[n("code",null,"return"),s("，"),n("code",null,"throw"),s("，"),n("code",null,"continue"),s(" 和 "),n("code",null,"break"),s(" 后不要再跟代码")]),s("。")],-1),al={href:"http://eslint.org/docs/rules/no-unreachable",target:"_blank",rel:"noopener noreferrer"},el=n("code",null,"no-unreachable",-1),tl=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">doSomething</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;never called&#39;</span><span class="token punctuation">)</span>     <span class="token comment">// ✗ avoid</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ol=n("p",null,[n("strong",null,[n("code",null,"finally"),s(" 代码块中不要再改变程序执行流程")]),s("。")],-1),ll={href:"http://eslint.org/docs/rules/no-unsafe-finally",target:"_blank",rel:"noopener noreferrer"},pl=n("code",null,"no-unsafe-finally",-1),cl=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">42</span>     <span class="token comment">// ✗ avoid</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),il=n("p",null,[n("strong",null,"关系运算符的左值不要做取反操作"),s("。")],-1),rl={href:"http://eslint.org/docs/rules/no-unsafe-negation",target:"_blank",rel:"noopener noreferrer"},ul=n("code",null,"no-unsafe-negation",-1),dl=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>       <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),kl=n("p",null,[n("strong",null,[s("避免不必要的 "),n("code",null,".call()"),s(" 和 "),n("code",null,".apply()")]),s("。")],-1),vl={href:"http://eslint.org/docs/rules/no-useless-call",target:"_blank",rel:"noopener noreferrer"},ml=n("code",null,"no-useless-call",-1),gl=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">sum</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),_l=n("p",null,[n("strong",null,"避免使用不必要的计算值作对象属性"),s("。")],-1),bl={href:"http://eslint.org/docs/rules/no-useless-computed-key",target:"_blank",rel:"noopener noreferrer"},hl=n("code",null,"no-useless-computed-key",-1),fl=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span> <span class="token punctuation">}</span>   <span class="token comment">// ✗ avoid</span>
<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span> <span class="token punctuation">}</span>       <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),yl=n("p",null,[n("strong",null,"禁止多余的构造器"),s("。")],-1),jl={href:"http://eslint.org/docs/rules/no-useless-constructor",target:"_blank",rel:"noopener noreferrer"},wl=n("code",null,"no-useless-constructor",-1),xl=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// ✗ avoid</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Sl=n("p",null,[n("strong",null,"禁止不必要的转义"),s("。")],-1),El={href:"http://eslint.org/docs/rules/no-useless-escape",target:"_blank",rel:"noopener noreferrer"},Jl=n("code",null,"no-useless-escape",-1),Nl=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&#39;Hell\\o&#39;</span>  <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),ql=n("p",null,[n("strong",null,"import, export 和解构操作中，禁止赋值到同名变量"),s("。")],-1),Fl={href:"http://eslint.org/docs/rules/no-useless-rename",target:"_blank",rel:"noopener noreferrer"},Ll=n("code",null,"no-useless-rename",-1),Rl=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> config <span class="token keyword">as</span> config <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./config&#39;</span>     <span class="token comment">// ✗ avoid</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> config <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./config&#39;</span>               <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ol=n("p",null,[n("strong",null,"属性前面不要加空格"),s("。")],-1),Al={href:"http://eslint.org/docs/rules/no-whitespace-before-property",target:"_blank",rel:"noopener noreferrer"},Dl=n("code",null,"no-whitespace-before-property",-1),Il=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>user <span class="token punctuation">.</span>name      <span class="token comment">// ✗ avoid</span>
user<span class="token punctuation">.</span>name       <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ul=n("p",null,[n("strong",null,[s("禁止使用 "),n("code",null,"with")]),s("。")],-1),zl={href:"http://eslint.org/docs/rules/no-with",target:"_blank",rel:"noopener noreferrer"},Cl=n("code",null,"no-with",-1),Hl=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">with</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),Tl=n("p",null,[n("strong",null,"对象属性换行时注意统一代码风格"),s("。")],-1),Vl={href:"http://eslint.org/docs/rules/object-property-newline",target:"_blank",rel:"noopener noreferrer"},Bl=n("code",null,"object-property-newline",-1),$l=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Jane Doe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
  <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;jdoe86&#39;</span>            <span class="token comment">// ✗ avoid</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Jane Doe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;jdoe86&#39;</span> <span class="token punctuation">}</span>    <span class="token comment">// ✓ ok</span>

<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Jane Doe&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
  <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;jdoe86&#39;</span>
<span class="token punctuation">}</span>                                                                 <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ml=n("p",null,[n("strong",null,"代码块中避免多余留白"),s("。")],-1),Pl={href:"http://eslint.org/docs/rules/padded-blocks",target:"_blank",rel:"noopener noreferrer"},Yl=n("code",null,"padded-blocks",-1),Kl=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token comment">// ✗ avoid</span>
  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// ✓ ok</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Gl=n("p",null,[n("strong",null,"展开运算符与它的表达式间不要留空白"),s("。")],-1),Ql={href:"http://eslint.org/docs/rules/rest-spread-spacing",target:"_blank",rel:"noopener noreferrer"},Wl=n("code",null,"rest-spread-spacing",-1),Xl=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span> args<span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>     <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Zl=n("p",null,[n("strong",null,"遇到分号时空格要后留前不留"),s("。")],-1),np={href:"http://eslint.org/docs/rules/semi-spacing",target:"_blank",rel:"noopener noreferrer"},sp=n("code",null,"semi-spacing",-1),ap=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ep=n("p",null,[n("strong",null,"代码块首尾留空格"),s("。")],-1),tp={href:"http://eslint.org/docs/rules/space-before-blocks",target:"_blank",rel:"noopener noreferrer"},op=n("code",null,"space-before-blocks",-1),lp=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>admin<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>     <span class="token comment">// ✗ avoid</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>admin<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),pp=n("p",null,[n("strong",null,"圆括号间不留空格"),s("。")],-1),cp={href:"http://eslint.org/docs/rules/space-in-parens",target:"_blank",rel:"noopener noreferrer"},ip=n("code",null,"space-in-parens",-1),rp=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">getName</span><span class="token punctuation">(</span> name <span class="token punctuation">)</span>     <span class="token comment">// ✗ avoid</span>
<span class="token function">getName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>       <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),up=n("p",null,[n("strong",null,"一元运算符后面跟一个空格"),s("。")],-1),dp={href:"http://eslint.org/docs/rules/space-unary-ops",target:"_blank",rel:"noopener noreferrer"},kp=n("code",null,"space-unary-ops",-1),vp=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span><span class="token operator">!</span>admin        <span class="token comment">// ✗ avoid</span>
<span class="token keyword">typeof</span> <span class="token operator">!</span>admin        <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),mp=n("p",null,[n("strong",null,"注释首尾留空格"),s("。")],-1),gp={href:"http://eslint.org/docs/rules/spaced-comment",target:"_blank",rel:"noopener noreferrer"},_p=n("code",null,"spaced-comment",-1),bp=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//comment           // ✗ avoid</span>
<span class="token comment">// comment          // ✓ ok</span>

<span class="token comment">/*comment*/</span>         <span class="token comment">// ✗ avoid</span>
<span class="token comment">/* comment */</span>       <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),hp=n("p",null,[n("strong",null,"模板字符串中变量前后不加空格"),s("。")],-1),fp={href:"http://eslint.org/docs/rules/template-curly-spacing",target:"_blank",rel:"noopener noreferrer"},yp=n("code",null,"template-curly-spacing",-1),jp=t('<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> name <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>    <span class="token comment">// ✗ avoid</span>\n<span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>      <span class="token comment">// ✓ ok</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>',1),wp=n("p",null,[n("strong",null,[s("检查 "),n("code",null,"NaN"),s(" 的正确姿势是使用 "),n("code",null,"isNaN()")]),s("。")],-1),xp={href:"http://eslint.org/docs/rules/use-isnan",target:"_blank",rel:"noopener noreferrer"},Sp=n("code",null,"use-isnan",-1),Ep=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>price <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>      <span class="token comment">// ✗ avoid</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>       <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Jp=n("p",null,[n("strong",null,[s("用合法的字符串跟 "),n("code",null,"typeof"),s(" 进行比较操作")]),s("。")],-1),Np={href:"http://eslint.org/docs/rules/valid-typeof",target:"_blank",rel:"noopener noreferrer"},qp=n("code",null,"valid-typeof",-1),Fp=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> name <span class="token operator">===</span> <span class="token string">&#39;undefimed&#39;</span>     <span class="token comment">// ✗ avoid</span>
<span class="token keyword">typeof</span> name <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span>     <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Lp=n("p",null,[n("strong",null,"自调用匿名函数 (IIFEs) 使用括号包裹"),s("。")],-1),Rp={href:"http://eslint.org/docs/rules/wrap-iife",target:"_blank",rel:"noopener noreferrer"},Op=n("code",null,"wrap-iife",-1),Ap=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">// ✗ avoid</span>

<span class="token keyword">const</span> getName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>
<span class="token keyword">const</span> getName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Dp=n("p",null,[n("strong",null,[n("code",null,"yield *"),s(" 中的 "),n("code",null,"*"),s(" 前后都要有空格")]),s("。")],-1),Ip={href:"http://eslint.org/docs/rules/yield-star-spacing",target:"_blank",rel:"noopener noreferrer"},Up=n("code",null,"yield-star-spacing",-1),zp=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// ✗ avoid</span>
<span class="token keyword">yield</span> <span class="token operator">*</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Cp=n("p",null,[n("strong",null,"请书写优雅的条件语句（avoid Yoda conditions）"),s("。")],-1),Hp={href:"http://eslint.org/docs/rules/yoda",target:"_blank",rel:"noopener noreferrer"},Tp=n("code",null,"yoda",-1),Vp=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">42</span> <span class="token operator">===</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token comment">// ✗ avoid</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">===</span> <span class="token number">42</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token comment">// ✓ ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Bp=n("h2",{id:"关于分号",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#关于分号","aria-hidden":"true"},"#"),s(" 关于分号")],-1),$p={href:"http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding",target:"_blank",rel:"noopener noreferrer"},Mp={href:"https://web.archive.org/web/20201206065632/http://inimino.org/~inimino/blog/javascript_semicolons",target:"_blank",rel:"noopener noreferrer"},Pp={href:"https://www.youtube.com/watch?v=gsfbh17Ax9I",target:"_blank",rel:"noopener noreferrer"},Yp={href:"http://eslint.org/docs/rules/semi",target:"_blank",rel:"noopener noreferrer"},Kp=n("code",null,"semi",-1),Gp=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// ✓ ok</span>
window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ✗ avoid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Qp=n("p",null,[s("不要使用 "),n("code",null,"("),s(", "),n("code",null,"["),s(", or "),n("code",null,"`"),s(" 等作为一行的开始。在没有分号的情况下代码压缩后会导致报错，而坚持这一规范则可避免出错。")],-1),Wp={href:"http://eslint.org/docs/rules/no-unexpected-multiline",target:"_blank",rel:"noopener noreferrer"},Xp=n("code",null,"no-unexpected-multiline",-1),Zp=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>
<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// ✗ avoid</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>
<span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span>

<span class="token comment">// ✗ avoid</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ✓ ok</span>
<span class="token punctuation">;</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hello</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// ✗ avoid</span>
<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hello</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>备注：上面的写法只能说聪明过头了。</p><p>相比更加可读易懂的代码，那些看似投巧的写法是不可取的。</p><p>譬如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>建议的写法是：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
nums<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,9),nc=n("h2",{id:"拓展阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#拓展阅读","aria-hidden":"true"},"#"),s(" 拓展阅读")],-1),sc={href:"http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding",target:"_blank",rel:"noopener noreferrer"},ac={href:"https://web.archive.org/web/20201206065632/http://inimino.org/~inimino/blog/javascript_semicolons",target:"_blank",rel:"noopener noreferrer"},ec=n("h5",{id:"一个值得观看的视频",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一个值得观看的视频","aria-hidden":"true"},"#"),s(" 一个值得观看的视频：")],-1),tc={href:"https://www.youtube.com/watch?v=gsfbh17Ax9I",target:"_blank",rel:"noopener noreferrer"},oc=n("p",null,"当前主流的代码压缩方案都是基于词法（AST-based）进行的，所以在处理无分号的代码时完全没有压力（何况 JavaScript 中分号本来就不是强制的）。",-1),lc={id:"一段摘抄自-an-open-letter-to-javascript-leaders-regarding-semicolons-这篇文章的内容",tabindex:"-1"},pc=n("a",{class:"header-anchor",href:"#一段摘抄自-an-open-letter-to-javascript-leaders-regarding-semicolons-这篇文章的内容","aria-hidden":"true"},"#",-1),cc={href:"http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding",target:"_blank",rel:"noopener noreferrer"},ic=t(`<blockquote><p>[自动化插入分号的做法]是安全可依赖的，而且其产出的代码能够在所有浏览器里很好地运行。 Closure compiler, yuicompressor, packer 还有 jsmin 都能正确地对这样的代码进行压缩处理。并没有任何性能相关的问题。</p><p>不得不说，Javascript 社区里的大牛们一直是错误的，并不能教给你最佳实践。真是让人忧伤啊。 我建议先弄清楚 JS 是怎样断句的（还有就是哪些地方看起来断了其实并没有），明白了这个后就可以随心写出漂亮的代码了。</p><p>一般来说， <code>\\n</code> 表示语句结束，除非：</p><ol><li>该语句有未闭合的括号， 数组字面量， 对象字面量 或者其他不能正常结束一条语句的情况（譬如，以 <code>.</code> 或 <code>,</code> 结尾）</li><li>该语句是 <code>--</code> 或者 <code>++</code> （它会将后面的内容进行自增或减）</li><li>该语句是 <code>for()</code>，<code>while()</code>，<code>do</code>，<code>if()</code> 或者 <code>else</code> 并且没有 <code>{</code></li><li>下一行以 <code>[</code>，<code>(</code>，<code>+</code>，<code>*</code>，<code>/</code>，<code>-</code>，<code>,</code>，<code>.</code> 或者其他只会单独出现在两块内容间的二元操作符。</li></ol><p>第一条很容易理解。即使在 JSLint 中，也允许 JSON，构造器的括号中，以及使用 <code>var</code> 配合 <code>,</code> 结尾来声明多个变量等这些情中包含 <code>\\n</code>。</p><p>第二条有点奇葩。 我还想不出谁会（除了这里用作讨论外）写出 <code>i\\n++\\nj</code> 这样的代码来，不过，顺便说一下，这种写法最后解析的结果是 <code>i; ++j</code>，而不是 <code>i++; j</code>。</p><p>第三条也容易理解。 <code>if (x)\\ny()</code> 等价于 <code>if (x) { y() }</code>。解释器会向下寻找到代码块或一条语句为止。</p><p><code>;</code> 是条合法的 JavaScript 语句。所以 <code>if(x);</code> 等价于 <code>if(x){}</code>，表示 “如果 x 为真，什么也不做。” 这种写法在循环里面可以看到，就是当条件判断与条件更新是同一个方法的时候。 不常见，但也不至于没听说过吧。</p><p>第四条就是常见的 “看，说过要加分号！” 的情形。但这些情况可以通过在语句前面加上分号来解决，如果你确定该语句跟前面的没关系的话。举个例子，假如你想这样：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>那么完全可以这样来写：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>后者的好处是分号比较瞩目，一旦习惯后便再也不会看到以 <code>(</code> 和 <code>[</code> 开头又不带分号的语句了。</p></blockquote>`,1);function rc(uc,dc){const a=l("ExternalLinkIcon");return p(),c("div",null,[u,i(` <p align="center">
  <a href="/docs/RULES-en.md">English</a> •
  <a href="/docs/RULES-esla.md">Español (Latinoamérica)</a> •
  <a href="/docs/RULES-fr.md">Français</a> •
  <a href="/docs/RULES-id.md">Bahasa Indonesia</a> •
  <a href="/docs/RULES-iteu.md">Italiano (Italian)</a> •
  <a href="/docs/RULES-ja.md">日本語 (Japanese)</a> •
  <a href="/docs/RULES-kokr.md">한국어 (Korean)</a> •
  <a href="/docs/RULES-ptbr.md">Português (Brasil)</a> •
  <a href="/docs/RULES-zhcn.md">简体中文 (Simplified Chinese)</a> •
  <a href="/docs/RULES-zhtw.md">繁體中文 (Taiwanese Mandarin)</a>
</p> `),n("p",null,[n("a",d,[k,e(a)])]),n("p",null,[s("这是 JavaScript "),n("a",v,[s("standard"),e(a)]),s(" 代码规范的全文。")]),m,g,n("ul",null,[n("li",null,[_,n("p",null,[s("eslint: "),n("a",b,[h,e(a)])]),f]),n("li",null,[y,n("p",null,[s("eslint: "),n("a",j,[w,e(a)])]),x]),n("li",null,[S,n("p",null,[s("eslint: "),n("a",E,[J,e(a)])]),N]),n("li",null,[q,n("p",null,[s("eslint: "),n("a",F,[L,e(a)])]),R]),n("li",null,[O,n("p",null,[s("eslint: "),n("a",A,[D,e(a)])]),I]),n("li",null,[U,n("p",null,[s("eslint: "),n("a",z,[C,e(a)])]),H]),n("li",null,[T,n("p",null,[s("eslint: "),n("a",V,[B,e(a)])]),$]),n("li",null,[M,n("p",null,[s("eslint: "),n("a",P,[Y,e(a)])]),K]),n("li",null,[G,n("p",null,[s("eslint: "),n("a",Q,[W,e(a)])]),X]),n("li",null,[Z,n("p",null,[s("eslint: "),n("a",nn,[sn,e(a)])]),an]),n("li",null,[en,n("p",null,[s("eslint: "),n("a",tn,[on,e(a)])]),ln]),n("li",null,[pn,n("p",null,[s("eslint: "),n("a",cn,[rn,e(a)])]),un]),n("li",null,[dn,n("p",null,[s("eslint: "),n("a",kn,[vn,e(a)])]),mn]),n("li",null,[gn,n("p",null,[s("eslint: "),n("a",_n,[bn,e(a)])]),hn]),n("li",null,[fn,n("p",null,[s("eslint: "),n("a",yn,[jn,e(a)])]),wn]),n("li",null,[xn,n("p",null,[s("eslint: "),n("a",Sn,[En,e(a)])]),Jn]),n("li",null,[Nn,n("p",null,[s("eslint: "),n("a",qn,[Fn,e(a)])]),Ln]),n("li",null,[Rn,n("p",null,[s("eslint: "),n("a",On,[An,e(a)])]),Dn]),n("li",null,[In,n("p",null,[s("eslint: "),n("a",Un,[zn,e(a)])]),Cn]),n("li",null,[Hn,n("p",null,[s("eslint: "),n("a",Tn,[Vn,e(a)])]),Bn]),n("li",null,[$n,n("p",null,[s("eslint: "),n("a",Mn,[Pn,e(a)])]),Yn]),n("li",null,[Kn,n("p",null,[s("eslint: "),n("a",Gn,[Qn,e(a)])])]),n("li",null,[Wn,n("p",null,[s("eslint: "),n("a",Xn,[Zn,e(a)])]),ns]),n("li",null,[ss,n("p",null,[s("eslint: "),n("a",as,[es,e(a)])]),ts]),n("li",null,[os,n("p",null,[s("eslint: "),n("a",ls,[ps,e(a)])]),cs]),n("li",null,[is,n("p",null,[s("eslint: "),n("a",rs,[us,e(a)])]),ds]),n("li",null,[ks,n("p",null,[s("eslint: "),n("a",vs,[ms,e(a)])]),gs]),n("li",null,[_s,n("p",null,[s("eslint: "),n("a",bs,[hs,e(a)])]),fs]),n("li",null,[ys,n("p",null,[s("eslint: "),n("a",js,[ws,e(a)])]),xs]),n("li",null,[Ss,n("p",null,[s("eslint: "),n("a",Es,[Js,e(a)])]),Ns]),n("li",null,[qs,n("p",null,[s("eslint: "),n("a",Fs,[Ls,e(a)])]),Rs]),n("li",null,[Os,n("p",null,[s("eslint: "),n("a",As,[Ds,e(a)])]),Is]),n("li",null,[Us,n("p",null,[s("eslint: "),n("a",zs,[Cs,e(a)])]),Hs]),n("li",null,[Ts,n("p",null,[s("eslint: "),n("a",Vs,[Bs,e(a)])]),$s]),n("li",null,[Ms,n("p",null,[s("eslint: "),n("a",Ps,[Ys,e(a)])]),Ks]),n("li",null,[Gs,n("p",null,[s("eslint: "),n("a",Qs,[Ws,e(a)])]),Xs]),n("li",null,[Zs,n("p",null,[s("eslint: "),n("a",na,[sa,e(a)])]),aa]),n("li",null,[ea,n("p",null,[s("eslint: "),n("a",ta,[oa,e(a)])]),la]),n("li",null,[pa,n("p",null,[s("eslint: "),n("a",ca,[ia,e(a)])]),ra]),n("li",null,[ua,n("p",null,[s("eslint: "),n("a",da,[ka,e(a)])]),va]),n("li",null,[ma,n("p",null,[s("eslint: "),n("a",ga,[_a,e(a)])]),ba]),n("li",null,[ha,n("p",null,[s("eslint: "),n("a",fa,[ya,e(a)])]),ja]),n("li",null,[wa,n("p",null,[s("eslint: "),n("a",xa,[Sa,e(a)])]),Ea]),n("li",null,[Ja,n("p",null,[s("eslint: "),n("a",Na,[qa,e(a)])]),Fa]),n("li",null,[La,n("p",null,[s("eslint: "),n("a",Ra,[Oa,e(a)])]),Aa]),n("li",null,[Da,n("p",null,[s("eslint: "),n("a",Ia,[Ua,e(a)])]),za]),n("li",null,[Ca,n("p",null,[s("eslint: "),n("a",Ha,[Ta,e(a)])]),Va]),n("li",null,[Ba,n("p",null,[s("eslint: "),n("a",$a,[Ma,e(a)])]),Pa]),n("li",null,[Ya,n("p",null,[s("eslint: "),n("a",Ka,[Ga,e(a)])]),Qa]),n("li",null,[Wa,n("p",null,[s("eslint: "),n("a",Xa,[Za,e(a)])]),ne]),n("li",null,[se,n("p",null,[s("eslint: "),n("a",ae,[ee,e(a)])]),te]),n("li",null,[oe,n("p",null,[s("eslint: "),n("a",le,[pe,e(a)])]),ce]),n("li",null,[ie,n("p",null,[s("eslint: "),n("a",re,[ue,e(a)])]),de]),n("li",null,[ke,n("p",null,[s("eslint: "),n("a",ve,[me,e(a)])]),ge]),n("li",null,[_e,n("p",null,[s("eslint: "),n("a",be,[he,e(a)])]),fe]),n("li",null,[ye,n("p",null,[s("eslint: "),n("a",je,[we,e(a)])]),xe]),n("li",null,[Se,n("p",null,[s("eslint: "),n("a",Ee,[Je,e(a)])]),Ne]),n("li",null,[qe,n("p",null,[s("eslint: "),n("a",Fe,[Le,e(a)])]),Re]),n("li",null,[Oe,n("p",null,[s("eslint: "),n("a",Ae,[De,e(a)])]),Ie]),n("li",null,[Ue,n("p",null,[s("eslint: "),n("a",ze,[Ce,e(a)])]),He]),n("li",null,[Te,n("p",null,[s("eslint: "),n("a",Ve,[Be,e(a)])]),$e]),n("li",null,[Me,n("p",null,[s("eslint: "),n("a",Pe,[Ye,e(a)])])]),n("li",null,[Ke,n("p",null,[s("eslint: "),n("a",Ge,[Qe,e(a)])]),We]),n("li",null,[Xe,n("p",null,[s("eslint: "),n("a",Ze,[nt,e(a)])]),st]),n("li",null,[at,n("p",null,[s("eslint: "),n("a",et,[tt,e(a)])]),ot]),n("li",null,[lt,n("p",null,[s("eslint: "),n("a",pt,[ct,e(a)])]),it]),n("li",null,[rt,n("p",null,[s("eslint: "),n("a",ut,[dt,e(a)])]),kt]),n("li",null,[vt,n("p",null,[s("eslint: "),n("a",mt,[gt,e(a)])]),_t]),n("li",null,[bt,n("p",null,[s("eslint: "),n("a",ht,[ft,e(a)])]),yt]),n("li",null,[jt,n("p",null,[s("eslint: "),n("a",wt,[xt,e(a)])]),St]),n("li",null,[Et,n("p",null,[s("eslint: "),n("a",Jt,[Nt,e(a)])]),qt]),n("li",null,[Ft,n("p",null,[s("eslint: "),n("a",Lt,[Rt,e(a)])]),Ot]),n("li",null,[At,n("p",null,[s("eslint: "),n("a",Dt,[It,e(a)])]),Ut]),n("li",null,[zt,n("p",null,[s("eslint: "),n("a",Ct,[Ht,e(a)])]),Tt]),n("li",null,[Vt,n("p",null,[s("eslint: "),n("a",Bt,[$t,e(a)])]),Mt]),n("li",null,[Pt,n("p",null,[s("eslint: "),n("a",Yt,[Kt,e(a)])]),Gt]),n("li",null,[Qt,n("p",null,[s("eslint: "),n("a",Wt,[Xt,e(a)])]),Zt]),n("li",null,[no,n("p",null,[s("eslint: "),n("a",so,[ao,e(a)])]),eo]),n("li",null,[to,n("p",null,[s("eslint: "),n("a",oo,[lo,e(a)])]),po]),n("li",null,[co,n("p",null,[s("esint: "),n("a",io,[ro,e(a)])]),uo]),n("li",null,[ko,n("p",null,[s("eslint: "),n("a",vo,[mo,e(a)])]),go]),n("li",null,[_o,n("p",null,[s("eslint: "),n("a",bo,[ho,e(a)])]),fo]),n("li",null,[yo,n("p",null,[s("eslint: "),n("a",jo,[wo,e(a)])]),xo]),n("li",null,[So,n("p",null,[s("eslint: "),n("a",Eo,[Jo,e(a)])])]),n("li",null,[No,n("p",null,[s("eslint: "),n("a",qo,[Fo,e(a)])]),Lo]),n("li",null,[Ro,n("p",null,[s("eslint: "),n("a",Oo,[Ao,e(a)])]),Do]),n("li",null,[Io,n("p",null,[s("eslint: "),n("a",Uo,[zo,e(a)])]),Co]),n("li",null,[Ho,n("p",null,[s("eslint: "),n("a",To,[Vo,e(a)])])]),n("li",null,[Bo,n("p",null,[s("eslint: "),n("a",$o,[Mo,e(a)])]),Po]),n("li",null,[Yo,n("p",null,[s("eslint: "),n("a",Ko,[Go,e(a)])]),Qo]),n("li",null,[Wo,n("p",null,[s("eslint: "),n("a",Xo,[Zo,e(a)])]),nl]),n("li",null,[sl,n("p",null,[s("eslint: "),n("a",al,[el,e(a)])]),tl]),n("li",null,[ol,n("p",null,[s("eslint: "),n("a",ll,[pl,e(a)])]),cl]),n("li",null,[il,n("p",null,[s("eslint: "),n("a",rl,[ul,e(a)])]),dl]),n("li",null,[kl,n("p",null,[s("eslint: "),n("a",vl,[ml,e(a)])]),gl]),n("li",null,[_l,n("p",null,[s("eslint: "),n("a",bl,[hl,e(a)])]),fl]),n("li",null,[yl,n("p",null,[s("eslint: "),n("a",jl,[wl,e(a)])]),xl]),n("li",null,[Sl,n("p",null,[s("eslint: "),n("a",El,[Jl,e(a)])]),Nl]),n("li",null,[ql,n("p",null,[s("eslint: "),n("a",Fl,[Ll,e(a)])]),Rl]),n("li",null,[Ol,n("p",null,[s("eslint: "),n("a",Al,[Dl,e(a)])]),Il]),n("li",null,[Ul,n("p",null,[s("eslint: "),n("a",zl,[Cl,e(a)])]),Hl]),n("li",null,[Tl,n("p",null,[s("eslint: "),n("a",Vl,[Bl,e(a)])]),$l]),n("li",null,[Ml,n("p",null,[s("eslint: "),n("a",Pl,[Yl,e(a)])]),Kl]),n("li",null,[Gl,n("p",null,[s("eslint: "),n("a",Ql,[Wl,e(a)])]),Xl]),n("li",null,[Zl,n("p",null,[s("eslint: "),n("a",np,[sp,e(a)])]),ap]),n("li",null,[ep,n("p",null,[s("eslint: "),n("a",tp,[op,e(a)])]),lp]),n("li",null,[pp,n("p",null,[s("eslint: "),n("a",cp,[ip,e(a)])]),rp]),n("li",null,[up,n("p",null,[s("eslint: "),n("a",dp,[kp,e(a)])]),vp]),n("li",null,[mp,n("p",null,[s("eslint: "),n("a",gp,[_p,e(a)])]),bp]),n("li",null,[hp,n("p",null,[s("eslint: "),n("a",fp,[yp,e(a)])]),jp]),n("li",null,[wp,n("p",null,[s("eslint: "),n("a",xp,[Sp,e(a)])]),Ep]),n("li",null,[Jp,n("p",null,[s("eslint: "),n("a",Np,[qp,e(a)])]),Fp]),n("li",null,[Lp,n("p",null,[s("eslint: "),n("a",Rp,[Op,e(a)])]),Ap]),n("li",null,[Dp,n("p",null,[s("eslint: "),n("a",Ip,[Up,e(a)])]),zp]),n("li",null,[Cp,n("p",null,[s("eslint: "),n("a",Hp,[Tp,e(a)])]),Vp])]),Bp,n("ul",null,[n("li",null,[n("p",null,[s("不要使用分号。 (参见："),n("a",$p,[s("1"),e(a)]),s("，"),n("a",Mp,[s("2"),e(a)]),s("，"),n("a",Pp,[s("3"),e(a)]),s(")")]),n("p",null,[s("eslint: "),n("a",Yp,[Kp,e(a)])]),Gp]),n("li",null,[Qp,n("p",null,[s("eslint: "),n("a",Wp,[Xp,e(a)])]),Zp])]),nc,n("ul",null,[n("li",null,[n("a",sc,[s("An Open Letter to JavaScript Leaders Regarding Semicolons"),e(a)])]),n("li",null,[n("a",ac,[s("JavaScript Semicolon Insertion – Everything you need to know"),e(a)])])]),ec,n("ul",null,[n("li",null,[n("a",tc,[s("JavaScript 中的分号多余吗？- YouTube"),e(a)])])]),oc,n("h5",lc,[pc,s(" 一段摘抄自 "),n("em",null,[n("a",cc,[s('"An Open Letter to JavaScript Leaders Regarding Semicolons"'),e(a)])]),s(" 这篇文章的内容：")]),ic])}const vc=o(r,[["render",rc],["__file","02.Eslint配置细则.html.vue"]]);export{vc as default};
